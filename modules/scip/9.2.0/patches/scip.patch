diff --git a/src/lpi/lpi_glop.cpp b/src/lpi/lpi_glop.cpp
index 2471778a8f..673e9689e9 100644
--- a/src/lpi/lpi_glop.cpp
+++ b/src/lpi/lpi_glop.cpp
@@ -51,7 +51,6 @@
 #include "ortools/util/time_limit.h"

 #include "ortools/base/logging.h"
-#include "ortools/base/vlog_is_on.h"

 #include "lpi/lpi.h"
 #include "scip/pub_message.h"
@@ -2942,12 +2941,12 @@ SCIP_RETCODE SCIPlpiSetIntpar(
       SCIPdebugMessage("SCIPlpiSetIntpar: SCIP_LPPAR_LPINFO -> %d.\n", ival);
       if ( ival == 0 )
       {
-         (void) google::SetVLOGLevel("*", google::GLOG_INFO);
+         absl::SetFlag(&FLAGS_stderrthreshold, 2);
          lpi->lp_info = false;
       }
       else
       {
-         (void) google::SetVLOGLevel("*", google::GLOG_ERROR);
+         absl::SetFlag(&FLAGS_stderrthreshold, 0);
          lpi->lp_info = true;
       }
       break;
@@ -3190,7 +3189,7 @@ SCIP_RETCODE SCIPlpiReadLP(

    const std::string filespec(fname);
    MPModelProto proto;
-   if ( ! ReadFileToProto(filespec, &proto) )
+   if ( ! ReadFileToProto(filespec, &proto).ok() )
    {
       SCIPerrorMessage("Could not read <%s>\n", fname);
       return SCIP_READERROR;
@@ -3214,7 +3213,7 @@ SCIP_RETCODE SCIPlpiWriteLP(
    MPModelProto proto;
    LinearProgramToMPModelProto(*lpi->linear_program, &proto);
    const std::string filespec(fname);
-   if ( ! WriteProtoToFile(filespec, proto, operations_research::ProtoWriteFormat::kProtoText, true) )
+   if ( ! WriteProtoToFile(filespec, proto, operations_research::ProtoWriteFormat::kProtoText, true).ok() )
    {
       SCIPerrorMessage("Could not write <%s>\n", fname);
       return SCIP_READERROR;
diff --git a/src/scip/config.h b/src/scip/config.h
new file mode 100644
index 0000000000..871fde8e55
--- /dev/null
+++ b/src/scip/config.h
@@ -0,0 +1,32 @@
+#ifndef __CONFIG_H__
+#define __CONFIG_H__
+
+#define CMAKE_BUILD_TYPE "Release"
+#define SCIP_VERSION_MAJOR 9
+#define SCIP_VERSION_MINOR 2
+#define SCIP_VERSION_PATCH 0
+#define SCIP_VERSION_SUB 0
+#define SCIP_VERSION_API 115
+/* #undef BMS_NOBLOCKMEM */
+/* #undef SCIP_NOBUFFERMEM */
+/* #undef WITH_DEBUG_SOLUTION */
+/* #undef SCIP_NO_SIGACTION */
+/* #undef SCIP_NO_STRTOK_R */
+/* #undef TPI_NONE */
+#define TPI_NONE
+/* #undef TPI_OMP */
+#define SCIP_THREADSAFE
+#define WITH_SCIPDEF
+/* #undef SCIP_WITH_LAPACK */
+/* #undef SCIP_WITH_PAPILO */
+#define SCIP_WITH_ZLIB
+/* #undef SCIP_WITH_READLINE */
+/* #undef SCIP_WITH_GMP */
+/* #undef SCIP_WITH_LPSCHECK */
+/* #undef SCIP_WITH_ZIMPL */
+/* #undef SCIP_WITH_AMPL */
+#define SCIP_ROUNDING_FE
+/* #undef SCIP_ROUNDING_FP */
+/* #undef SCIP_ROUNDING_MS */
+
+#endif
diff --git a/src/scip/scip_export.h b/src/scip/scip_export.h
new file mode 100644
index 0000000000..871fde8e55
--- /dev/null
+++ b/src/scip/scip_export.h
@@ -0,0 +1,24 @@
+
+#ifndef SCIP_EXPORT_H
+#define SCIP_EXPORT_H
+
+#ifdef SCIP_STATIC_DEFINE
+#  define SCIP_EXPORT
+#  define SCIP_NO_EXPORT
+#else
+#  ifndef SCIP_EXPORT
+#    ifdef libscip_EXPORTS
+/* We are building this library */
+#      define SCIP_EXPORT
+#    else
+/* We are using this library */
+#      define SCIP_EXPORT
+#    endif
+#  endif
+
+#  ifndef SCIP_NO_EXPORT
+#    define SCIP_NO_EXPORT
+#  endif
+#endif
+
+#endif /* SCIP_EXPORT_H */
diff --git a/src/scip/githash.c b/src/scip/githash.c
new file mode 100644
index 0000000000..d1e99c662d
--- /dev/null
+++ b/src/scip/githash.c
@@ -0,0 +1 @@
+#define SCIP_GITHASH "a740f0891e"
\ No newline at end of file
diff --git a/src/scip/scipbuildflags.c b/src/scip/scipbuildflags.c
--- a/src/scip/scipbuildflags.c
+++ b/src/scip/scipbuildflags.c
@@ -23,7 +23,6 @@
 /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

 /**@file   scipbuildflags.c
- * @ingroup OTHER_CFILES
  * @brief  build flags methods
  * @author Felipe Serrano
  */
@@ -31,12 +30,36 @@
 /*---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----0----+----1----+----2*/

 #include "scip/scipbuildflags.h"
-#include "scip/buildflags.h"

 /** returns the flags that were used to build SCIP */
 const char* SCIPgetBuildFlags(
    void
    )
 {
-   return SCIP_BUILDFLAGS "\n LPS=" SCIP_LPS "\n IPOPT=" SCIP_IPOPT;
+   return " ARCH=arm64\n\
+ OSTYPE=Darwin-23.6.0\n\
+ COMP=AppleClang 16.0.0.16000026\n\
+ BUILD=Release\n\
+ DEBUGSOL=OFF\n\
+ EXPRINT=none\n\
+ SYM=none\n\
+ GMP=OFF\n\
+ IPOPT=OFF\n\
+ WORHP=OFF\n\
+ LPS=none\n\
+ LPSCHECK=OFF\n\
+ NOBLKBUFMEM=OFF\n\
+ NOBLKMEM=OFF\n\
+ NOBUFMEM=OFF\n\
+ THREADSAFE=ON;FORCE\n\
+ READLINE=OFF\n\
+ SANITIZE_ADDRESS=OFF\n\
+ SANITIZE_MEMORY=OFF\n\
+ SANITIZE_UNDEFINED=OFF\n\
+ SANITIZE_THREAD=OFF\n\
+ SHARED=OFF\n\
+ VERSION=9.2.0.0\n\
+ API_VERSION=115\n\
+ ZIMPL=OFF\n\
+ ZLIB=ON";
 }
diff --git a/src/symmetry/compute_symmetry_bliss.cpp b/src/symmetry/compute_symmetry_bliss.cpp
index 26117a8026..2f164d133b 100644
--- a/src/compute_symmetry_bliss.cpp	2024-11-08 16:36:13
+++ b/src/symmetry/compute_symmetry_bliss.cpp	2024-11-08 16:37:32
@@ -34,8 +34,9 @@
 #include "compute_symmetry.h"

 /* include bliss graph */
-#include <bliss/defs.hh>
-#include <bliss/graph.hh>
+#define BLISS_VERSION "0.73"
+#include <defs.hh>
+#include <graph.hh>

 #include <string.h>
 #include <vector>
