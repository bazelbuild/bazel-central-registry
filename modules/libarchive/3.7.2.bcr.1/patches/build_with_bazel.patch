diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 00000000..4e8176eb
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,38 @@
+cc_library(
+    name = "config_h",
+    hdrs = ["xplat_config.h"],
+    defines = select({
+        "@platforms//os:linux": [
+            "HAVE_PATHS_H",
+            "HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC",
+        ],
+        "//conditions:default": [],
+    }) + select({
+        "@platforms//os:windows": [
+            "gid_t=short",
+            "id_t=\"unsigned long\"",
+            "uid_t=short",
+        ],
+        "//conditions:default": [
+            "HAVE_SYS_TYPES_H",
+        ],
+    }) + select({
+        "@platforms//os:windows": ["HAVE_WINCRYPT_H"],
+        "//conditions:default": [],
+    }) + select({
+        "@platforms//os:windows": [],
+        "//conditions:default": [
+            "HAVE_FORK",
+            "HAVE_PIPE",
+            "HAVE_POLL",
+            "HAVE_POLL_H",
+            "HAVE_PWD_H",
+            "HAVE_SYS_WAIT_H",
+            "HAVE_UNISTD_H",
+        ],
+    }) + select({
+        "@platforms//os:windows": [],
+        "//conditions:default": ["HAVE_GRP_H"],
+    }),
+    visibility = ["//visibility:public"],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100644
index 00000000..8045919a
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,11 @@
+module(
+    name = "libarchive",
+    version = "3.7.2.bcr.1",
+    compatibility_level = 1,
+)
+bazel_dep(name = "bzip2", version = "1.0.8")
+bazel_dep(name = "lz4", version = "1.9.4")
+bazel_dep(name = "platforms", version = "0.0.9")
+bazel_dep(name = "xz", version = "5.4.5.bcr.1")
+bazel_dep(name = "zlib", version = "1.3.1")
+bazel_dep(name = "zstd", version = "1.5.5.bcr.1")
diff --git a/WORKSPACE b/WORKSPACE
new file mode 100644
index 00000000..e69de29b
diff --git a/libarchive/BUILD.bazel b/libarchive/BUILD.bazel
new file mode 100644
index 00000000..85b9b37b
--- /dev/null
+++ b/libarchive/BUILD.bazel
@@ -0,0 +1,49 @@
+PUBLIC_HEADERS = [
+    "archive.h",
+    "archive_entry.h",
+]
+
+WINDOWS_SRCS = glob(["*_windows.*"]) + ["archive_entry_copy_bhfi.c"]
+
+cc_library(
+    name = "libarchive",
+    srcs = glob(
+        [
+            "*.c",
+            "*.h",
+        ],
+        exclude = PUBLIC_HEADERS + WINDOWS_SRCS + [
+            "archive_disk_acl_*.c",
+        ],
+    ) + select({
+        "@platforms//os:windows": WINDOWS_SRCS,
+        "@platforms//os:macos": ["archive_disk_acl_darwin.c"],
+        "@platforms//os:linux": ["archive_disk_acl_linux.c"],
+        "//conditions:default": [],
+    }),
+    hdrs = PUBLIC_HEADERS,
+    local_defines = [
+        "HAVE_CONFIG_H",
+        # ZSTD support
+        "HAVE_ZSTD_H",
+        "HAVE_LIBZSTD",
+        "HAVE_LIBZSTD_COMPRESSOR",
+        # LZMA support
+        "HAVE_LZMA_H",
+        "HAVE_LZMA_STREAM_ENCODER_MT",
+        # BZIP2 support
+        "HAVE_LIBBZ2",
+        "HAVE_BZLIB_H",
+        # LZ4 support
+        "HAVE_LIBLZ4",
+        "HAVE_LZ4_H",
+    ],
+    visibility = ["//visibility:public"],
+    deps = [
+        "//:config_h",
+        "@bzip2//:bz2",
+        "@lz4",
+        "@xz//:lzma",
+        "@zstd",
+    ],
+)
diff --git a/libarchive/archive_hmac_private.h b/libarchive/archive_hmac_private.h
index d0fda7f9..e41c944d 100644
--- a/libarchive/archive_hmac_private.h
+++ b/libarchive/archive_hmac_private.h
@@ -40,12 +40,13 @@
  */
 int __libarchive_hmac_build_hack(void);
 
-#ifdef __APPLE__
-# include <AvailabilityMacros.h>
-# if MAC_OS_X_VERSION_MAX_ALLOWED >= 1060
-#  define ARCHIVE_HMAC_USE_Apple_CommonCrypto
-# endif
-#endif
+// Don't compile against CommonCrypto.
+// #ifdef __APPLE__
+// # include <AvailabilityMacros.h>
+// # if MAC_OS_X_VERSION_MAX_ALLOWED >= 1060
+// #  define ARCHIVE_HMAC_USE_Apple_CommonCrypto
+// # endif
+// #endif
 
 #ifdef ARCHIVE_HMAC_USE_Apple_CommonCrypto
 #include <CommonCrypto/CommonHMAC.h>
diff --git a/libarchive/config.h b/libarchive/config.h
new file mode 100644
index 00000000..1bb06802
--- /dev/null
+++ b/libarchive/config.h
@@ -0,0 +1,13 @@
+
+#ifndef LIBARCHIVE_CONFIG_H
+#define LIBARCHIVE_CONFIG_H
+
+#include <ctype.h>
+#include <wchar.h>
+
+#include "xplat_config.h"
+
+#define __LIBARCHIVE_CONFIG_H_INCLUDED 1
+
+#endif // LIBARCHIVE_CONFIG_H
+
diff --git a/libarchive_fe/BUILD.bazel b/libarchive_fe/BUILD.bazel
new file mode 100644
index 00000000..51a75a64
--- /dev/null
+++ b/libarchive_fe/BUILD.bazel
@@ -0,0 +1,9 @@
+cc_library(
+    name = "libarchive_fe",
+    srcs = glob(["*.c"]),
+    hdrs = glob(["*.h"]),
+    visibility = ["//visibility:public"],
+    deps = [
+        "//:config_h",
+    ],
+)
diff --git a/libarchive_fe/config.h b/libarchive_fe/config.h
new file mode 100644
index 00000000..1f484ee0
--- /dev/null
+++ b/libarchive_fe/config.h
@@ -0,0 +1,6 @@
+#ifndef LIBARCHIVE_FE_CONFIG_H
+#define LIBARCHIVE_FE_CONFIG_H
+
+#include "xplat_config.h"
+
+#endif // LIBARCHIVE_FE_CONFIG_H
\ No newline at end of file
diff --git a/tar/BUILD.bazel b/tar/BUILD.bazel
new file mode 100644
index 00000000..39fc5330
--- /dev/null
+++ b/tar/BUILD.bazel
@@ -0,0 +1,36 @@
+cc_binary(
+    name = "tar",
+    srcs = select({
+        "@platforms//os:windows": glob([
+            "*.c",
+            "*.h",
+        ]),
+        "//conditions:default": glob(
+            [
+                "*.c",
+                "*.h",
+            ],
+            exclude = ["bsdtar_windows.*"],
+        ),
+    }),
+    copts = select({
+        "@platforms//os:windows": [],
+        "//conditions:default": [
+            "-Wno-implicit-function-declaration",
+            "-Wno-int-conversion",
+        ],
+    }),
+    defines = [
+        'BSDTAR_VERSION_STRING=\\"3.7.2\\"',
+    ],
+    includes = [
+        "../libarchive",
+        "../libarchive_fe",
+    ],
+    visibility = ["//visibility:public"],
+    deps = [
+        "//:config_h",
+        "//libarchive",
+        "//libarchive_fe",
+    ],
+)
diff --git a/tar/bsdtar.c b/tar/bsdtar.c
index 75249d10..a8f79db4 100644
--- a/tar/bsdtar.c
+++ b/tar/bsdtar.c
@@ -197,7 +197,7 @@ main(int argc, char **argv)
 #endif
 
 	/* Set lafe_progname before calling lafe_warnc. */
-	lafe_setprogname(*argv, "bsdtar");
+	lafe_setprogname("tar", "bsdtar");
 
 #if HAVE_SETLOCALE
 	if (setlocale(LC_ALL, "") == NULL)
@@ -1013,7 +1013,7 @@ static const char *long_help_msg =
 	"  -c Create  -r Add/Replace  -t List  -u Update  -x Extract\n"
 	"Common Options:\n"
 	"  -b #  Use # 512-byte records per I/O block\n"
-	"  -f <filename>  Location of archive (default " _PATH_DEFTAPE ")\n"
+	"  -f <filename>  Location of archive\n"
 	"  -v    Verbose\n"
 	"  -w    Interactive\n"
 	"Create: %p -c [options] [<file> | <dir> | @<archive> | -C <dir> ]\n"
diff --git a/tar/config.h b/tar/config.h
new file mode 100644
index 00000000..f0a39c7e
--- /dev/null
+++ b/tar/config.h
@@ -0,0 +1,7 @@
+#ifndef TAR_CONFIG_H
+#define TAR_CONFIG_H
+
+#include "xplat_config.h"
+
+#endif // TAR_CONFIG_H
+
diff --git a/xplat_config.h b/xplat_config.h
new file mode 100644
index 00000000..3daebe37
--- /dev/null
+++ b/xplat_config.h
@@ -0,0 +1,41 @@
+#ifndef XPLAT_CONFIG_H
+#define XPLAT_CONFIG_H
+
+#define HAVE_DECL_SIZE_MAX 1
+#define HAVE_DECL_SSIZE_MAX 1
+#define HAVE_DECL_UINT32_MAX 1
+#define HAVE_DECL_INT32_MAX 1
+#define HAVE_DECL_INT32_MIN 1
+#define HAVE_DECL_UINT64_MAX 1
+#define HAVE_DECL_INT64_MAX 1
+#define HAVE_DECL_INT64_MIN 1
+#define HAVE_DECL_UINTMAX_MAX 1
+#define HAVE_DECL_INTMAX_MAX 1
+#define HAVE_DECL_INTMAX_MIN 1
+
+#define HAVE_DIRENT_H 1
+#define HAVE_ERRNO_H 1
+#define HAVE_FCHDIR 1
+#define HAVE_FCNTL 1
+#define HAVE_FCNTL_H 1
+#define HAVE_INTTYPES_H 1
+#define HAVE_LIMITS_H 1
+#define HAVE_PTHREAD_H 1
+#define HAVE_REGEX_H 1
+#define HAVE_STDARG_H 1
+#define HAVE_STDLIB_H 1
+#define HAVE_STDINT_H 1
+#define HAVE_STRING_H 1
+#define HAVE_SYS_STAT_H 1
+#define HAVE_SYS_TIME_H 1
+#define HAVE_TIME_H
+#define HAVE_UINTMAX_T 1
+#define HAVE_UNSIGNED_LONG_LONG 1
+#define HAVE_WCTYPE_H 1
+#define HAVE_WCSCPY 1
+#define HAVE_WCSLEN 1
+
+#define MAC_OS_X_VERSION_MIN_REQUIRED 1060
+#define MAC_OS_X_VERSION_MAX_ALLOWED 1070
+
+#endif  // XPLAT_CONFIG_H
