--- cmake/modules/Findfoonathan_memory.cmake
+++ cmake/modules/Findfoonathan_memory.cmake
@@ -0,0 +1,45 @@
+# Findfoonathan_memory.cmake
+
+# Look for the header file
+find_path(FOONATHAN_MEMORY_INCLUDE_DIR
+    NAMES foonathan/memory/container.hpp
+    PATHS
+    /usr/include
+    /usr/local/include
+    $ENV{FOONATHAN_MEMORY_HOME}/include
+    ${CMAKE_INSTALL_PREFIX}/include
+    PATH_SUFFIXES foonathan_memory foonathan_memory+
+)
+
+# Look for the library
+find_library(FOONATHAN_MEMORY_LIBRARY
+    NAMES foonathan_memory
+    PATHS
+    /usr/lib
+    /usr/lib64
+    /usr/local/lib
+    /usr/local/lib64
+    $ENV{FOONATHAN_MEMORY_HOME}
+    $ENV{FOONATHAN_MEMORY_HOME}/lib
+    ${CMAKE_INSTALL_PREFIX}/lib
+    ${CMAKE_INSTALL_PREFIX}/lib64
+)
+
+# Handle the QUIETLY and REQUIRED arguments and set FOONATHAN_MEMORY_FOUND to TRUE if
+# all listed variables are TRUE
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(foonathan_memory
+    FOUND_VAR FOONATHAN_MEMORY_FOUND
+    REQUIRED_VARS FOONATHAN_MEMORY_LIBRARY FOONATHAN_MEMORY_INCLUDE_DIR
+)
+
+# Mark these variables as advanced so they don't show up in the GUI by default
+mark_as_advanced(FOONATHAN_MEMORY_INCLUDE_DIR FOONATHAN_MEMORY_LIBRARY)
+
+if(FOONATHAN_MEMORY_FOUND)
+    # If found, set these variables for consumers
+    set(foonathan_memory_LIBRARY ${FOONATHAN_MEMORY_LIBRARY})
+    set(foonathan_memory_INCLUDE_DIR ${FOONATHAN_MEMORY_INCLUDE_DIR})
+    message("-- Found foonathan_memory dir: ${foonathan_memory_INCLUDE_DIR}")
+    message("-- Found foonathan_memory lib: ${foonathan_memory_LIBRARY}")
+endif()
