load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")

package(default_visibility = ["//visibility:public"])

cc_library(
    name = "test_common",
    hdrs = glob([
        "*.hpp",
        "**/*.hpp",
    ]),
    includes = ["."],
    deps = [
        "//:boost.geometry",
        "@boost.test",
    ],
)

test_deps = [
    ":test_common",
    "//:boost.geometry",
    "@boost.test",
    "@boost.assign",
    "@boost.crc",
    "@boost.graph",
]

cc_test(
    name = "minimal",
    srcs = ["minimal.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "append",
    srcs = ["algorithms/append.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "area",
    srcs = ["algorithms/area/area.cpp"],
    includes = [
        ".",
        "algorithms/area",
    ],
    deps = test_deps,
)

cc_test(
    name = "area_multi",
    srcs = ["algorithms/area/area_multi.cpp"],
    includes = [
        ".",
        "algorithms/area",
    ],
    deps = test_deps,
)

cc_test(
    name = "area_geo",
    srcs = ["algorithms/area/area_geo.cpp"],
    includes = [
        ".",
        "algorithms/area",
    ],
    deps = test_deps,
)

cc_test(
    name = "area_sph_geo",
    srcs = ["algorithms/area/area_sph_geo.cpp"],
    includes = [
        ".",
        "algorithms/area",
    ],
    deps = test_deps,
)

cc_test(
    name = "buffer",
    srcs = ["algorithms/buffer/buffer.cpp"],
    includes = [
        ".",
        "algorithms/buffer",
    ],
    deps = test_deps,
)

cc_test(
    name = "buffer_point",
    srcs = ["algorithms/buffer/buffer_point.cpp"],
    includes = [
        ".",
        "algorithms/buffer",
    ],
    deps = test_deps,
)

cc_test(
    name = "buffer_linestring",
    srcs = ["algorithms/buffer/buffer_linestring.cpp"],
    includes = [
        ".",
        "algorithms/buffer",
    ],
    deps = test_deps,
)

cc_test(
    name = "buffer_polygon",
    srcs = ["algorithms/buffer/buffer_polygon.cpp"],
    defines = ["BOOST_GEOMETRY_TEST_ONLY_ONE_TYPE"],
    includes = [
        ".",
        "algorithms/buffer",
    ],
    deps = test_deps,
)

cc_test(
    name = "centroid",
    srcs = ["algorithms/centroid.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "centroid_multi",
    srcs = ["algorithms/centroid_multi.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "access",
    srcs = ["core/access.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "coordinate_dimension",
    srcs = ["core/coordinate_dimension.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "coordinate_system",
    srcs = ["core/coordinate_system.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "coordinate_type",
    srcs = ["core/coordinate_type.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "geometry_id",
    srcs = ["core/geometry_id.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "point_type",
    srcs = ["core/point_type.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "ring",
    srcs = ["core/ring.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "tag",
    srcs = ["core/tag.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "point",
    srcs = ["geometries/point.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "point_xy",
    srcs = ["geometries/point_xy.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "point_xyz",
    srcs = ["geometries/point_xyz.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "linestring",
    srcs = ["geometries/linestring.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "polygon",
    srcs = ["geometries/polygon.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "multi_point",
    srcs = ["geometries/multi_point.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "multi_linestring",
    srcs = ["geometries/multi_linestring.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "multi_polygon",
    srcs = ["geometries/multi_polygon.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "box",
    srcs = ["geometries/box.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "segment",
    srcs = ["geometries/segment.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "wkt",
    srcs = ["io/wkt/wkt.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_library(
    name = "wkt_test_lib",
    hdrs = ["io/wkt/wkt.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "wkt_multi",
    srcs = ["io/wkt/wkt_multi.cpp"],
    includes = ["."],
    deps = [":wkt_test_lib"] + test_deps,
)

cc_test(
    name = "closing_iterator",
    srcs = ["iterators/closing_iterator.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "point_iterator",
    srcs = ["iterators/point_iterator.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "segment_iterator",
    srcs = ["iterators/segment_iterator.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "cross_track",
    srcs = ["strategies/cross_track.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "haversine",
    srcs = ["strategies/haversine.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "pythagoras",
    srcs = ["strategies/pythagoras.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "for_each_coordinate",
    srcs = ["util/for_each_coordinate.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "math_equals",
    srcs = ["util/math_equals.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "select_most_precise",
    srcs = ["util/select_most_precise.cpp"],
    includes = ["."],
    deps = test_deps,
)

# View tests
cc_test(
    name = "box_view",
    srcs = ["views/box_view.cpp"],
    includes = ["."],
    deps = test_deps,
)

cc_test(
    name = "segment_view",
    srcs = ["views/segment_view.cpp"],
    includes = ["."],
    deps = test_deps,
)

test_suite(
    name = "all_tests",
    tests = [
        ":access",
        ":append",
        ":area",
        ":area_geo",
        ":area_multi",
        ":area_sph_geo",
        ":box",
        ":box_view",
        ":buffer",
        ":buffer_linestring",
        ":buffer_point",
        ":buffer_polygon",
        ":centroid",
        ":centroid_multi",
        ":closing_iterator",
        ":coordinate_dimension",
        ":coordinate_system",
        ":coordinate_type",
        ":cross_track",
        ":for_each_coordinate",
        ":geometry_id",
        ":haversine",
        ":linestring",
        ":math_equals",
        ":minimal",
        ":multi_linestring",
        ":multi_point",
        ":multi_polygon",
        ":point",
        ":point_iterator",
        ":point_type",
        ":point_xy",
        ":point_xyz",
        ":polygon",
        ":pythagoras",
        ":ring",
        ":segment",
        ":segment_iterator",
        ":segment_view",
        ":select_most_precise",
        ":tag",
        ":wkt",
        ":wkt_multi",
    ],
)
