diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100644
index 0000000..298bf40
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,13 @@
+"""
+Module: json11
+Purpose: Provides the json11 library compileable as a Bazel target. Also includes test as bazel test target.
+Note: The source project has been archived, and this should only be used for legacy purposes!
+"""
+
+module(
+    name = "json11",
+    version = "1.0.1-0.20200325232727-2df9473fb360",
+    compatibility_level = 1,
+)
+
+bazel_dep(name = "rules_cc", version = "0.1.1")
diff --git a/test.cpp b/test.cpp
index 3712d10..7ce1714 100644
--- a/test.cpp
+++ b/test.cpp
@@ -11,4 +11,4 @@
 #define JSON11_TEST_STANDALONE_MAIN 1
-#define JSON11_TEST_CASE(name) static void name()
-#define JSON11_TEST_ASSERT(b) assert(b)
+#define JSON11_TEST_CASE(name) static int name()
+#define JSON11_TEST_ASSERT(b) do { if (!(b)) { std::cerr << "Assertion failed: " #b " at " << __FILE__ << ":" << __LINE__ << "\n"; return 1; } } while (0)
 #ifdef NDEBUG
@@ -67,2 +67,6 @@ JSON11_TEST_CASE(json11_test) {
     const auto json = Json::parse(simple_test, err);
+    if (!err.empty()) {
+        std::cerr << "Simple test parse failed: " << err << "\n";
+        return 1;
+    }
 
@@ -256,3 +260,3 @@ JSON11_TEST_CASE(json11_test) {
 
-static void parse_from_stdin() {
+static int parse_from_stdin() {
     string buf;
@@ -267,4 +271,6 @@ static void parse_from_stdin() {
         printf("Failed: %s\n", err.c_str());
+        return 1;
     } else {
         printf("Result: %s\n", json.dump().c_str());
+        return 0;
     }
@@ -274,7 +280,13 @@ int main(int argc, char **argv) {
     if (argc == 2 && argv[1] == string("--stdin")) {
-        parse_from_stdin();
-        return 0;
+      return parse_from_stdin();
+    }
+
+    int test_result = json11_test();
+    if (test_result != 0) {
+        std::cerr << "Tests failed with " << test_result << " errors\n";
+        return 1;
     }
 
-    json11_test();
+    std::cout << "All tests passed\n";
+    return 0;
 }
