diff --git a/folly/test/SharedMutexTest.cpp b/folly/test/SharedMutexTest.cpp
index 1e172c186..c6b4f9e84 100644
--- a/folly/test/SharedMutexTest.cpp
+++ b/folly/test/SharedMutexTest.cpp
@@ -344,9 +344,9 @@ void runFailingTryTimeoutTest() {
   lock.unlock();
 
   for (int p = 0; p < 8; ++p) {
-    typename std::shared_lock holder1(lock);
-    typename std::shared_lock holder2(lock);
-    typename std::shared_lock holder3(lock);
+    typename std::shared_lock<Lock> holder1(lock);
+    typename std::shared_lock<Lock> holder2(lock);
+    typename std::shared_lock<Lock> holder3(lock);
     EXPECT_FALSE(lock.try_lock_for(nanoseconds(1 << p)));
   }
 }
@@ -555,7 +555,7 @@ struct PosixMutex {
 template <template <typename> class Atom, typename Lock, typename Locker>
 static void runContendedReaders(
     size_t numOps, size_t numThreads, bool useSeparateLocks) {
-  struct alignas(hardware_destructive_interference_size)
+  alignas(folly::hardware_destructive_interference_size) struct
       GlobalLockAndProtectedValue {
     Lock globalLock;
     int valueProtectedByLock = 10;
@@ -663,7 +663,7 @@ static void runMixed(
     size_t numThreads,
     double writeFraction,
     bool useSeparateLocks) {
-  struct alignas(hardware_destructive_interference_size)
+  alignas(folly::hardware_destructive_interference_size) struct
       GlobalLockAndProtectedValue {
     Lock globalLock;
     int valueProtectedByLock = 0;
@@ -1358,7 +1358,7 @@ static void burn(size_t n) {
 // in turn with reader/writer conflict
 template <typename Lock, template <typename> class Atom = atomic>
 static void runPingPong(size_t numRounds, size_t burnCount) {
-  struct alignas(hardware_destructive_interference_size) PaddedLock {
+  alignas(folly::hardware_destructive_interference_size) struct PaddedLock {
     Lock lock_;
   };
   array<PaddedLock, 3> paddedLocks;
