load("//bzl:cpp_library.bzl", "cpp_library")

package(default_visibility = ["//visibility:public"])

cpp_library(
    name = "dwarf",
    srcs = [
        "Dwarf.cpp",
        "DwarfImpl.cpp",
        "DwarfLineNumberVM.cpp",
        "DwarfSection.cpp",
        "DwarfUtil.cpp",
    ],
    hdrs = [
        "Dwarf.h",
        "DwarfImpl.h",
        "DwarfLineNumberVM.h",
        "DwarfSection.h",
        "DwarfUtil.h",
    ],
    deps = [
        "//folly:function",
        "//folly:optional",
        "//folly:range",
        "//folly/experimental/symbolizer:elf",
        "//folly/experimental/symbolizer:elf_cache",
        "//folly/experimental/symbolizer:symbolized_frame",
        "//folly/lang:safe_assert",
        "//folly/portability:config",
        "//folly/portability:unistd",
        # TODO(kgk): Enable once @libdwarf is added to bcr. See:
        # https://github.com/bazelbuild/bazel-central-registry/issues/3653
        #"@libdwarf",
    ],
)

cpp_library(
    name = "elf",
    srcs = [
        "Elf.cpp",
    ],
    hdrs = [
        "Elf.h",
    ],
    textual_hdrs = [
        "Elf-inl.h",
    ],
    deps = [
        "//folly:conv",
        "//folly:exception",
        "//folly:likely",
        "//folly:range",
        "//folly:scope_guard",
        "//folly/lang:c_string",
        "//folly/lang:safe_assert",
        "//folly/portability:config",
        "//folly/portability:sys_mman",
        "//folly/portability:unistd",
        "@glog",
    ],
)

cpp_library(
    name = "symbolized_frame",
    srcs = ["SymbolizedFrame.cpp"],
    hdrs = ["SymbolizedFrame.h"],
    deps = [
        "//folly:range",
    ],
)

cpp_library(
    name = "line_reader",
    srcs = ["LineReader.cpp"],
    hdrs = ["LineReader.h"],
    deps = [
        "//folly:file_util",
        "//folly:range",
    ],
)

cpp_library(
    name = "stack_trace",
    srcs = ["StackTrace.cpp"],
    hdrs = ["StackTrace.h"],
    deps = [
        "//folly:cpp_attributes",
        "//folly:portability",
        "//folly/portability:config",
        "//folly/portability:libunwind",
        "//folly/portability:sys_types",
        "//folly/tracing:async_stack",
    ],
)

cpp_library(
    name = "elf_cache",
    srcs = [
        "ElfCache.cpp",
    ],
    hdrs = [
        "ElfCache.h",
    ],
    deps = [
        "//folly:optional",
        "//folly:range",
        "//folly:scope_guard",
        "//folly/experimental/symbolizer:elf",
        "//folly/hash",
        "//folly/memory:reentrant_allocator",
        "//folly/portability:config",
        "//folly/portability:sys_mman",
        "@boost.intrusive",
    ],
)

cpp_library(
    name = "symbolize_printer",
    srcs = [
        "SymbolizePrinter.cpp",
    ],
    hdrs = [
        "SymbolizePrinter.h",
    ],
    deps = [
        "//folly:demangle",
        "//folly:fbstring",
        "//folly:file_util",
        "//folly:range",
        "//folly:scope_guard",
        "//folly/experimental/symbolizer:symbolized_frame",
        "//folly/io:iobuf",
        "//folly/lang:to_ascii",
    ],
)

cpp_library(
    name = "symbolizer",
    srcs = [
        "Symbolizer.cpp",
    ],
    hdrs = [
        "Symbolizer.h",
    ],
    deps = [
        "//folly:fbstring",
        "//folly:file_util",
        "//folly:memory",
        "//folly:optional",
        "//folly:range",
        "//folly:scope_guard",
        "//folly:string",
        "//folly:synchronized",
        "//folly/container:evicting_cache_map",
        "//folly/experimental/symbolizer:dwarf",
        "//folly/experimental/symbolizer:elf",
        "//folly/experimental/symbolizer:elf_cache",
        "//folly/experimental/symbolizer:line_reader",
        "//folly/experimental/symbolizer:stack_trace",
        "//folly/experimental/symbolizer:symbolize_printer",
        "//folly/experimental/symbolizer:symbolized_frame",
        "//folly/experimental/symbolizer/detail:debug",
        "//folly/io:iobuf",
        "//folly/lang:safe_assert",
        "//folly/lang:to_ascii",
        "//folly/memory:sanitize_address",
        "//folly/portability:config",
        "//folly/portability:sys_mman",
        "//folly/portability:unistd",
        "//folly/tracing:async_stack",
    ],
)

cpp_library(
    name = "signal_handler",
    srcs = [
        "SignalHandler.cpp",
    ],
    hdrs = [
        "SignalHandler.h",
    ],
    deps = [
        "//folly:scope_guard",
        "//folly/experimental/symbolizer",
        "//folly/lang:to_ascii",
        "//folly/portability:sys_syscall",
        "//folly/portability:unistd",
        "@glog",
    ],
)
