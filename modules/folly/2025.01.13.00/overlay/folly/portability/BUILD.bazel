load("@rules_cc//cc:defs.bzl", "cc_library")

package(default_visibility = ["//visibility:public"])

cc_library(
    name = "asm",
    hdrs = ["Asm.h"],
    deps = [
        "//folly:portability",
    ],
)

cc_library(
    name = "atomic",
    hdrs = ["Atomic.h"],
    deps = [
        "//folly:portability",
    ],
)

cc_library(
    name = "builtins",
    srcs = ["Builtins.cpp"],
    hdrs = ["Builtins.h"],
    deps = [
        ":windows",
        "//folly:portability",
    ],
)

cc_library(
    name = "config",
    hdrs = ["Config.h"],
    deps = [
        "//folly:config",
    ],
)

cc_library(
    name = "constexpr",
    hdrs = ["Constexpr.h"],
    deps = [
        "//folly:c_portability",
        "//folly:portability",
    ],
)

cc_library(
    name = "dirent",
    srcs = ["Dirent.cpp"],
    hdrs = ["Dirent.h"],
    deps = [
        ":windows",
    ],
)

cc_library(
    name = "event",
    hdrs = ["Event.h"],
    deps = [
        ":fcntl",
        ":windows",
        "//folly/net/detail:socket_file_descriptor_map",
        "@libevent//:event_core",
    ],
)

cc_library(
    name = "fcntl",
    srcs = ["Fcntl.cpp"],
    hdrs = ["Fcntl.h"],
    deps = [
        ":sockets",
        ":sys_stat",
        ":windows",
        "//folly:portability",
    ],
)

cc_library(
    name = "filesystem",
    srcs = ["Filesystem.cpp"],
    hdrs = ["Filesystem.h"],
)

cc_library(
    name = "fmt_compile",
    hdrs = ["FmtCompile.h"],
    deps = [
        "@fmt",
    ],
)

cc_library(
    name = "gflags",
    hdrs = ["GFlags.h"],
    deps = [
        ":config",
        "@gflags",
    ],
)

cc_library(
    name = "gmock",
    hdrs = ["GMock.h"],
    deps = [
        ":unistd",
        ":windows",
        "//folly:portability",
        "@googletest//:gtest",
    ],
)

cc_library(
    name = "gtest",
    hdrs = ["GTest.h"],
    deps = [
        ":unistd",
        ":windows",
        "//folly:portability",
        "@googletest//:gtest",
    ],
)

cc_library(
    name = "iovec",
    hdrs = ["IOVec.h"],
)

cc_library(
    name = "libgen",
    srcs = ["Libgen.cpp"],
    hdrs = ["Libgen.h"],
)

cc_library(
    name = "libunwind",
    hdrs = ["Libunwind.h"],
    deps = [
        # TODO(kgk): Enable once @libunwind is added to bcr. See:
        # https://github.com/bazelbuild/bazel-central-registry/issues/3655
        # "@libunwind",

        # TODO(kgk): Enable once @jemalloc is added to bcr. See:
        # https://github.com/bazelbuild/bazel-central-registry/issues/3757
        # "@jemalloc",
    ],
)

# TODO(kgk): Support jemalloc and FOLLY_USE_JEMALLOC define here.
cc_library(
    name = "malloc",
    srcs = ["Malloc.cpp"],
    hdrs = ["Malloc.h"],
    deps = [
        ":config",
        "//folly:c_portability",
    ],
)

cc_library(
    name = "math",
    hdrs = ["Math.h"],
)

cc_library(
    # @shim
    name = "memory",
    hdrs = ["Memory.h"],
    deps = ["//folly:memory"],
)

cc_library(
    name = "openat2",
    srcs = ["openat2.c"],
    hdrs = ["openat2.h"],
    deps = [
        "//folly:config",
    ],
)

cc_library(
    name = "openssl",
    srcs = ["OpenSSL.cpp"],
    hdrs = ["OpenSSL.h"],
    deps = [
        ":windows",
        "//folly:portability",
        "@openssl//:crypto",
        "@openssl//:ssl",
    ],
)

cc_library(
    name = "sched",
    srcs = ["Sched.cpp"],
    hdrs = ["Sched.h"],
    deps = [
        "//folly:portability",
    ],
)

cc_library(
    name = "pthread",
    srcs = ["PThread.cpp"],
    hdrs = ["PThread.h"],
    linkopts = select({
        "@platforms//os:windows": [],
        "//conditions:default": ["-pthread"],
    }),
    deps = [
        ":config",
        ":sched",
        ":time",
        ":windows",
        "//folly:portability",
        "//folly/lang:assume",
        "@boost.core",
        "@boost.thread",
    ],
)

cc_library(
    name = "sockets",
    srcs = ["Sockets.cpp"],
    hdrs = ["Sockets.h"],
    deps = [
        "//folly:portability",
        "//folly:scope_guard",
        "//folly/net:net_ops",
        "//folly/net:network_socket",
        "//folly/net/detail:socket_file_descriptor_map",
    ],
)

cc_library(
    name = "source_location",
    hdrs = ["SourceLocation.h"],
    deps = [
        "@fmt",
    ],
)

cc_library(
    name = "stdio",
    srcs = ["Stdio.cpp"],
    hdrs = ["Stdio.h"],
    deps = [
        ":unistd",
        "//folly:scope_guard",
    ],
)

cc_library(
    name = "stdlib",
    srcs = ["Stdlib.cpp"],
    hdrs = ["Stdlib.h"],
    deps = [
        ":config",
        ":fcntl",
        ":sys_stat",
        ":windows",
        "//folly:c_portability",
    ],
)

cc_library(
    name = "string",
    srcs = ["String.cpp"],
    hdrs = ["String.h"],
    deps = [":config"],
)

cc_library(
    name = "sys_file",
    srcs = ["SysFile.cpp"],
    hdrs = ["SysFile.h"],
    deps = [
        ":windows",
    ],
)

cc_library(
    name = "sys_membarrier",
    srcs = ["SysMembarrier.cpp"],
    hdrs = ["SysMembarrier.h"],
    deps = [
        ":sys_syscall",
        "//folly:portability",
    ],
)

cc_library(
    name = "sys_mman",
    srcs = ["SysMman.cpp"],
    hdrs = [
        "SysMman.h",
    ],
    linkopts = select({
        "@platforms//os:windows": [],
        "//conditions:default": ["-lrt"],
    }),
    deps = [
        ":windows",
        "//folly:portability",
    ],
)

cc_library(
    name = "sys_resource",
    srcs = ["SysResource.cpp"],
    hdrs = ["SysResource.h"],
    deps = [
        ":sys_time",
        ":windows",
    ],
)

cc_library(
    name = "sys_stat",
    srcs = ["SysStat.cpp"],
    hdrs = ["SysStat.h"],
    deps = [
        ":sys_types",
        ":windows",
        "//folly:c_portability",
    ],
)

cc_library(
    name = "sys_syscall",
    hdrs = ["SysSyscall.h"],
    deps = [
        "//folly:c_portability",
        "//folly:portability",
    ],
)

cc_library(
    name = "sys_time",
    srcs = ["SysTime.cpp"],
    hdrs = ["SysTime.h"],
    deps = [":windows"],
)

cc_library(
    name = "sys_types",
    hdrs = ["SysTypes.h"],
)

cc_library(
    name = "sys_uio",
    srcs = ["SysUio.cpp"],
    hdrs = ["SysUio.h"],
    deps = [
        ":config",
        ":iovec",
        ":sockets",
        ":sys_file",
        ":sys_types",
        ":unistd",
        "//folly:scope_guard",
    ],
)

cc_library(
    name = "syslog",
    hdrs = ["Syslog.h"],
)

cc_library(
    name = "time",
    srcs = ["Time.cpp"],
    hdrs = ["Time.h"],
    linkopts = select({
        "@platforms//os:windows": [],
        "//conditions:default": ["-lrt"],
    }),
    deps = [
        ":config",
        ":windows",
        "//folly:c_portability",
        "//folly:likely",
        "//folly:utility",
    ],
)

cc_library(
    name = "unistd",
    srcs = ["Unistd.cpp"],
    hdrs = ["Unistd.h"],
    deps = [
        ":sockets",
        ":sys_types",
        ":windows",
        "//folly:portability",
        "//folly:scope_guard",
        "//folly/net/detail:socket_file_descriptor_map",
    ],
)

cc_library(
    name = "windows",
    hdrs = ["Windows.h"],
)
