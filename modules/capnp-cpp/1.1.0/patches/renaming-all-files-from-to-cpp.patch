From 8531e42028eea564b59c658eb057fbe4e7a8f87f Mon Sep 17 00:00:00 2001
From: Sebastian Bergt <sebastian.bergt@1x.tech>
Date: Wed, 12 Mar 2025 21:18:34 +0100
Subject: [PATCH 1/1] renaming all files from c++ to cpp

---
 .../{addressbook.c++ => addressbook.cpp}      |   0
 ...lator-client.c++ => calculator-client.cpp} |   0
 ...lator-server.c++ => calculator-server.cpp} |   0
 ...to-carsales.c++ => capnproto-carsales.cpp} |   0
 ...roto-catrank.c++ => capnproto-catrank.cpp} |   0
 ...{capnproto-eval.c++ => capnproto-eval.cpp} |   0
 .../{null-carsales.c++ => null-carsales.cpp}  |   0
 .../{null-catrank.c++ => null-catrank.cpp}    |   0
 .../{null-eval.c++ => null-eval.cpp}          |   0
 ...buf-carsales.c++ => protobuf-carsales.cpp} |   0
 ...tobuf-catrank.c++ => protobuf-catrank.cpp} |   0
 .../{protobuf-eval.c++ => protobuf-eval.cpp}  |   0
 c++/src/benchmark/{runner.c++ => runner.cpp}  |   4 +-
 c++/src/capnp/BUILD.bazel                     | 146 +++++++--------
 c++/src/capnp/CMakeLists.txt                  | 154 ++++++++--------
 .../{afl-testcase.c++ => afl-testcase.cpp}    |   0
 c++/src/capnp/{any-test.c++ => any-test.cpp}  |   0
 c++/src/capnp/{any.c++ => any.cpp}            |   0
 c++/src/capnp/{arena.c++ => arena.cpp}        |   0
 c++/src/capnp/arena.h                         |   2 +-
 .../capnp/{blob-test.c++ => blob-test.cpp}    |   0
 c++/src/capnp/{blob.c++ => blob.cpp}          |   0
 .../capnp/{c++.capnp.c++ => c++.capnp.cpp}    |   0
 ...icalize-test.c++ => canonicalize-test.cpp} |   0
 ...apability-test.c++ => capability-test.cpp} |   0
 .../capnp/{capability.c++ => capability.cpp}  |   2 +-
 c++/src/capnp/capability.h                    |   2 +-
 c++/src/capnp/cc_capnp_library.bzl            |   2 +-
 .../{common-test.c++ => common-test.cpp}      |   0
 c++/src/capnp/compat/BUILD.bazel              |  22 +--
 ...e-stream-test.c++ => byte-stream-test.cpp} |   0
 .../{byte-stream.c++ => byte-stream.cpp}      |   0
 ...-test.c++ => http-over-capnp-old-test.cpp} |   2 +-
 ...test.c++ => http-over-capnp-perf-test.cpp} |   0
 ...apnp-test.c++ => http-over-capnp-test.cpp} |   0
 ...ttp-over-capnp.c++ => http-over-capnp.cpp} |   0
 .../{json-rpc-test.c++ => json-rpc-test.cpp}  |   0
 .../compat/{json-rpc.c++ => json-rpc.cpp}     |   0
 .../compat/{json-test.c++ => json-test.cpp}   |   0
 .../compat/{json.capnp.c++ => json.capnp.cpp} |   0
 c++/src/capnp/compat/{json.c++ => json.cpp}   |   0
 ...et-rpc-test.c++ => websocket-rpc-test.cpp} |   0
 .../{websocket-rpc.c++ => websocket-rpc.cpp}  |   0
 .../capnp/compiler/{capnp.c++ => capnp.cpp}   |   0
 .../{capnpc-c++.c++ => capnpc-c++.cpp}        |   2 +-
 .../{capnpc-capnp.c++ => capnpc-capnp.cpp}    |   0
 .../compiler/{compiler.c++ => compiler.cpp}   |   0
 ...{error-reporter.c++ => error-reporter.cpp} |   0
 ...{evolution-test.c++ => evolution-test.cpp} |   0
 .../compiler/{generics.c++ => generics.cpp}   |   0
 .../{grammar.capnp.c++ => grammar.capnp.cpp}  |   0
 .../{lexer-test.c++ => lexer-test.cpp}        |   0
 .../{lexer.capnp.c++ => lexer.capnp.cpp}      |   0
 .../capnp/compiler/{lexer.c++ => lexer.cpp}   |   0
 .../{module-loader.c++ => module-loader.cpp}  |   0
 ...ode-translator.c++ => node-translator.cpp} |   0
 .../capnp/compiler/{parser.c++ => parser.cpp} |   0
 .../{type-id-test.c++ => type-id-test.cpp}    |   0
 .../compiler/{type-id.c++ => type-id.cpp}     |   0
 ...-capability.c++ => dynamic-capability.cpp} |   0
 .../{dynamic-test.c++ => dynamic-test.cpp}    |   0
 c++/src/capnp/{dynamic.c++ => dynamic.cpp}    |   0
 .../{encoding-test.c++ => encoding-test.cpp}  |   0
 ...back-test.c++ => endian-fallback-test.cpp} |   2 +-
 ...verse-test.c++ => endian-reverse-test.cpp} |   0
 .../{endian-test.c++ => endian-test.cpp}      |   0
 .../{ez-rpc-test.c++ => ez-rpc-test.cpp}      |   0
 c++/src/capnp/{ez-rpc.c++ => ez-rpc.cpp}      |   0
 .../capnp/{fuzz-test.c++ => fuzz-test.cpp}    |   0
 c++/src/capnp/generated-header-support.h      |   2 +-
 .../{layout-test.c++ => layout-test.cpp}      |   0
 c++/src/capnp/{layout.c++ => layout.cpp}      |   4 +-
 c++/src/capnp/layout.h                        |   6 +-
 c++/src/capnp/{list.c++ => list.cpp}          |   0
 ...-testcase.c++ => llvm-fuzzer-testcase.cpp} |   0
 .../{membrane-test.c++ => membrane-test.cpp}  |   0
 c++/src/capnp/{membrane.c++ => membrane.cpp}  |   0
 .../{message-test.c++ => message-test.cpp}    |   0
 c++/src/capnp/{message.c++ => message.cpp}    |   0
 .../{orphan-test.c++ => orphan-test.cpp}      |   0
 ...sistent.capnp.c++ => persistent.capnp.cpp} |   0
 ...{reconnect-test.c++ => reconnect-test.cpp} |   0
 .../capnp/{reconnect.c++ => reconnect.cpp}    |   0
 c++/src/capnp/{rpc-test.c++ => rpc-test.cpp}  |   0
 ...woparty-test.c++ => rpc-twoparty-test.cpp} |   2 +-
 ...party.capnp.c++ => rpc-twoparty.capnp.cpp} |   0
 .../{rpc-twoparty.c++ => rpc-twoparty.cpp}    |   0
 c++/src/capnp/rpc.capnp                       |   2 +-
 .../capnp/{rpc.capnp.c++ => rpc.capnp.cpp}    |   0
 c++/src/capnp/{rpc.c++ => rpc.cpp}            |   2 +-
 ...loader-test.c++ => schema-loader-test.cpp} |   2 +-
 .../{schema-loader.c++ => schema-loader.cpp}  |   0
 ...parser-test.c++ => schema-parser-test.cpp} |   0
 .../{schema-parser.c++ => schema-parser.cpp}  |   0
 .../{schema-test.c++ => schema-test.cpp}      |   0
 .../{schema.capnp.c++ => schema.capnp.cpp}    |   0
 c++/src/capnp/{schema.c++ => schema.cpp}      |   0
 ...sync-test.c++ => serialize-async-test.cpp} |   0
 ...erialize-async.c++ => serialize-async.cpp} |   0
 ...ked-test.c++ => serialize-packed-test.cpp} |   0
 ...ialize-packed.c++ => serialize-packed.cpp} |   0
 ...{serialize-test.c++ => serialize-test.cpp} |   0
 ...-text-test.c++ => serialize-text-test.cpp} |   0
 ...{serialize-text.c++ => serialize-text.cpp} |   0
 .../capnp/{serialize.c++ => serialize.cpp}    |   0
 .../{stream.capnp.c++ => stream.capnp.cpp}    |   0
 ...{stringify-test.c++ => stringify-test.cpp} |   0
 .../capnp/{stringify.c++ => stringify.cpp}    |   0
 .../capnp/{test-util.c++ => test-util.cpp}    |   0
 c++/src/kj/BUILD.bazel                        | 154 ++++++++--------
 c++/src/kj/CMakeLists.txt                     | 166 +++++++++---------
 c++/src/kj/{arena-test.c++ => arena-test.cpp} |   0
 c++/src/kj/{arena.c++ => arena.cpp}           |   0
 c++/src/kj/{array-test.c++ => array-test.cpp} |   0
 c++/src/kj/{array.c++ => array.cpp}           |   0
 ...tine-test.c++ => async-coroutine-test.cpp} |   2 +-
 c++/src/kj/async-inl.h                        |   2 +-
 .../{async-io-test.c++ => async-io-test.cpp}  |   4 +-
 .../{async-io-unix.c++ => async-io-unix.cpp}  |   2 +-
 ...{async-io-win32.c++ => async-io-win32.cpp} |   2 +-
 c++/src/kj/{async-io.c++ => async-io.cpp}     |   0
 ...nc-queue-test.c++ => async-queue-test.cpp} |   0
 c++/src/kj/{async-test.c++ => async-test.cpp} |   0
 ...sync-unix-test.c++ => async-unix-test.cpp} |   0
 ...d-test.c++ => async-unix-xthread-test.cpp} |   2 +-
 c++/src/kj/{async-unix.c++ => async-unix.cpp} |   2 +-
 ...nc-win32-test.c++ => async-win32-test.cpp} |   0
 ...-test.c++ => async-win32-xthread-test.cpp} |   2 +-
 .../kj/{async-win32.c++ => async-win32.cpp}   |   0
 ...thread-test.c++ => async-xthread-test.cpp} |   2 +-
 c++/src/kj/{async.c++ => async.cpp}           |   0
 c++/src/kj/async.h                            |   6 +-
 c++/src/kj/{cidr.c++ => cidr.cpp}             |   0
 .../kj/{common-test.c++ => common-test.cpp}   |   2 +-
 c++/src/kj/{common.c++ => common.cpp}         |   0
 c++/src/kj/compat/BUILD.bazel                 |  32 ++--
 .../{brotli-test.c++ => brotli-test.cpp}      |   0
 c++/src/kj/compat/{brotli.c++ => brotli.cpp}  |   0
 .../compat/{gzip-test.c++ => gzip-test.cpp}   |   0
 c++/src/kj/compat/{gzip.c++ => gzip.cpp}      |   0
 ...pair-test.c++ => http-socketpair-test.cpp} |   2 +-
 .../compat/{http-test.c++ => http-test.cpp}   |   2 +-
 c++/src/kj/compat/{http.c++ => http.cpp}      |   0
 c++/src/kj/compat/make-test-certs.sh          |   2 +-
 ...ness-io-test.c++ => readiness-io-test.cpp} |   0
 .../{readiness-io.c++ => readiness-io.cpp}    |   0
 .../kj/compat/{tls-test.c++ => tls-test.cpp}  |   0
 c++/src/kj/compat/{tls.c++ => tls.cpp}        |   2 +-
 .../kj/compat/{url-test.c++ => url-test.cpp}  |   0
 c++/src/kj/compat/{url.c++ => url.cpp}        |   0
 c++/src/kj/{debug-test.c++ => debug-test.cpp} |   0
 c++/src/kj/{debug.c++ => debug.cpp}           |   0
 c++/src/kj/debug.h                            |   2 +-
 .../{encoding-test.c++ => encoding-test.cpp}  |   0
 c++/src/kj/{encoding.c++ => encoding.cpp}     |   0
 c++/src/kj/encoding.h                         |   2 +-
 ...=> exception-override-symbolizer-test.cpp} |   0
 ...{exception-test.c++ => exception-test.cpp} |   8 +-
 c++/src/kj/{exception.c++ => exception.cpp}   |   2 +-
 ...t.c++ => filesystem-disk-generic-test.cpp} |  10 +-
 ...++ => filesystem-disk-old-kernel-test.cpp} |   4 +-
 ...disk-test.c++ => filesystem-disk-test.cpp} |   2 +-
 ...disk-unix.c++ => filesystem-disk-unix.cpp} |   0
 ...sk-win32.c++ => filesystem-disk-win32.cpp} |   2 +-
 ...ilesystem-test.c++ => filesystem-test.cpp} |   0
 c++/src/kj/{filesystem.c++ => filesystem.cpp} |   0
 c++/src/kj/filesystem.h                       |   2 +-
 .../{function-test.c++ => function-test.cpp}  |   0
 c++/src/kj/{hash.c++ => hash.cpp}             |   0
 c++/src/kj/hash.h                             |   2 +-
 c++/src/kj/{io-test.c++ => io-test.cpp}       |   0
 c++/src/kj/{io.c++ => io.cpp}                 |   0
 c++/src/kj/{list-test.c++ => list-test.cpp}   |   0
 c++/src/kj/{list.c++ => list.cpp}             |   0
 c++/src/kj/{main.c++ => main.cpp}             |   0
 c++/src/kj/{map-test.c++ => map-test.cpp}     |   0
 .../kj/{memory-test.c++ => memory-test.cpp}   |   0
 c++/src/kj/{memory.c++ => memory.cpp}         |   0
 c++/src/kj/{mutex-test.c++ => mutex-test.cpp} |   0
 c++/src/kj/{mutex.c++ => mutex.cpp}           |   0
 c++/src/kj/mutex.h                            |   6 +-
 .../kj/{one-of-test.c++ => one-of-test.cpp}   |   0
 .../kj/parse/{char-test.c++ => char-test.cpp} |   0
 c++/src/kj/parse/{char.c++ => char.cpp}       |   0
 .../{common-test.c++ => common-test.cpp}      |   0
 .../{refcount-test.c++ => refcount-test.cpp}  |   0
 c++/src/kj/{refcount.c++ => refcount.cpp}     |   0
 ...ource-location.c++ => source-location.cpp} |   0
 .../{iostream-test.c++ => iostream-test.cpp}  |   0
 .../kj/{string-test.c++ => string-test.cpp}   |   0
 ...ing-tree-test.c++ => string-tree-test.cpp} |   0
 .../kj/{string-tree.c++ => string-tree.cpp}   |   0
 c++/src/kj/{string.c++ => string.cpp}         |   0
 c++/src/kj/{table-test.c++ => table-test.cpp} |   0
 c++/src/kj/{table.c++ => table.cpp}           |   0
 .../kj/{test-helpers.c++ => test-helpers.cpp} |   0
 c++/src/kj/{test-test.c++ => test-test.cpp}   |   0
 c++/src/kj/{test.c++ => test.cpp}             |   0
 .../kj/{thread-test.c++ => thread-test.cpp}   |   0
 c++/src/kj/{thread.c++ => thread.cpp}         |   0
 ...eadlocal-test.c++ => threadlocal-test.cpp} |   0
 c++/src/kj/{time-test.c++ => time-test.cpp}   |   0
 c++/src/kj/{time.c++ => time.cpp}             |   0
 c++/src/kj/{timer.c++ => timer.cpp}           |   0
 c++/src/kj/{tuple-test.c++ => tuple-test.cpp} |   0
 c++/src/kj/{units-test.c++ => units-test.cpp} |   0
 c++/src/kj/{units.c++ => units.cpp}           |   0
 207 files changed, 395 insertions(+), 395 deletions(-)
 rename c++/samples/{addressbook.c++ => addressbook.cpp} (100%)
 rename c++/samples/{calculator-client.c++ => calculator-client.cpp} (100%)
 rename c++/samples/{calculator-server.c++ => calculator-server.cpp} (100%)
 rename c++/src/benchmark/{capnproto-carsales.c++ => capnproto-carsales.cpp} (100%)
 rename c++/src/benchmark/{capnproto-catrank.c++ => capnproto-catrank.cpp} (100%)
 rename c++/src/benchmark/{capnproto-eval.c++ => capnproto-eval.cpp} (100%)
 rename c++/src/benchmark/{null-carsales.c++ => null-carsales.cpp} (100%)
 rename c++/src/benchmark/{null-catrank.c++ => null-catrank.cpp} (100%)
 rename c++/src/benchmark/{null-eval.c++ => null-eval.cpp} (100%)
 rename c++/src/benchmark/{protobuf-carsales.c++ => protobuf-carsales.cpp} (100%)
 rename c++/src/benchmark/{protobuf-catrank.c++ => protobuf-catrank.cpp} (100%)
 rename c++/src/benchmark/{protobuf-eval.c++ => protobuf-eval.cpp} (100%)
 rename c++/src/benchmark/{runner.c++ => runner.cpp} (99%)
 rename c++/src/capnp/{afl-testcase.c++ => afl-testcase.cpp} (100%)
 rename c++/src/capnp/{any-test.c++ => any-test.cpp} (100%)
 rename c++/src/capnp/{any.c++ => any.cpp} (100%)
 rename c++/src/capnp/{arena.c++ => arena.cpp} (100%)
 rename c++/src/capnp/{blob-test.c++ => blob-test.cpp} (100%)
 rename c++/src/capnp/{blob.c++ => blob.cpp} (100%)
 rename c++/src/capnp/{c++.capnp.c++ => c++.capnp.cpp} (100%)
 rename c++/src/capnp/{canonicalize-test.c++ => canonicalize-test.cpp} (100%)
 rename c++/src/capnp/{capability-test.c++ => capability-test.cpp} (100%)
 rename c++/src/capnp/{capability.c++ => capability.cpp} (99%)
 rename c++/src/capnp/{common-test.c++ => common-test.cpp} (100%)
 rename c++/src/capnp/compat/{byte-stream-test.c++ => byte-stream-test.cpp} (100%)
 rename c++/src/capnp/compat/{byte-stream.c++ => byte-stream.cpp} (100%)
 rename c++/src/capnp/compat/{http-over-capnp-old-test.c++ => http-over-capnp-old-test.cpp} (65%)
 rename c++/src/capnp/compat/{http-over-capnp-perf-test.c++ => http-over-capnp-perf-test.cpp} (100%)
 rename c++/src/capnp/compat/{http-over-capnp-test.c++ => http-over-capnp-test.cpp} (100%)
 rename c++/src/capnp/compat/{http-over-capnp.c++ => http-over-capnp.cpp} (100%)
 rename c++/src/capnp/compat/{json-rpc-test.c++ => json-rpc-test.cpp} (100%)
 rename c++/src/capnp/compat/{json-rpc.c++ => json-rpc.cpp} (100%)
 rename c++/src/capnp/compat/{json-test.c++ => json-test.cpp} (100%)
 rename c++/src/capnp/compat/{json.capnp.c++ => json.capnp.cpp} (100%)
 rename c++/src/capnp/compat/{json.c++ => json.cpp} (100%)
 rename c++/src/capnp/compat/{websocket-rpc-test.c++ => websocket-rpc-test.cpp} (100%)
 rename c++/src/capnp/compat/{websocket-rpc.c++ => websocket-rpc.cpp} (100%)
 rename c++/src/capnp/compiler/{capnp.c++ => capnp.cpp} (100%)
 rename c++/src/capnp/compiler/{capnpc-c++.c++ => capnpc-c++.cpp} (99%)
 rename c++/src/capnp/compiler/{capnpc-capnp.c++ => capnpc-capnp.cpp} (100%)
 rename c++/src/capnp/compiler/{compiler.c++ => compiler.cpp} (100%)
 rename c++/src/capnp/compiler/{error-reporter.c++ => error-reporter.cpp} (100%)
 rename c++/src/capnp/compiler/{evolution-test.c++ => evolution-test.cpp} (100%)
 rename c++/src/capnp/compiler/{generics.c++ => generics.cpp} (100%)
 rename c++/src/capnp/compiler/{grammar.capnp.c++ => grammar.capnp.cpp} (100%)
 rename c++/src/capnp/compiler/{lexer-test.c++ => lexer-test.cpp} (100%)
 rename c++/src/capnp/compiler/{lexer.capnp.c++ => lexer.capnp.cpp} (100%)
 rename c++/src/capnp/compiler/{lexer.c++ => lexer.cpp} (100%)
 rename c++/src/capnp/compiler/{module-loader.c++ => module-loader.cpp} (100%)
 rename c++/src/capnp/compiler/{node-translator.c++ => node-translator.cpp} (100%)
 rename c++/src/capnp/compiler/{parser.c++ => parser.cpp} (100%)
 rename c++/src/capnp/compiler/{type-id-test.c++ => type-id-test.cpp} (100%)
 rename c++/src/capnp/compiler/{type-id.c++ => type-id.cpp} (100%)
 rename c++/src/capnp/{dynamic-capability.c++ => dynamic-capability.cpp} (100%)
 rename c++/src/capnp/{dynamic-test.c++ => dynamic-test.cpp} (100%)
 rename c++/src/capnp/{dynamic.c++ => dynamic.cpp} (100%)
 rename c++/src/capnp/{encoding-test.c++ => encoding-test.cpp} (100%)
 rename c++/src/capnp/{endian-fallback-test.c++ => endian-fallback-test.cpp} (97%)
 rename c++/src/capnp/{endian-reverse-test.c++ => endian-reverse-test.cpp} (100%)
 rename c++/src/capnp/{endian-test.c++ => endian-test.cpp} (100%)
 rename c++/src/capnp/{ez-rpc-test.c++ => ez-rpc-test.cpp} (100%)
 rename c++/src/capnp/{ez-rpc.c++ => ez-rpc.cpp} (100%)
 rename c++/src/capnp/{fuzz-test.c++ => fuzz-test.cpp} (100%)
 rename c++/src/capnp/{layout-test.c++ => layout-test.cpp} (100%)
 rename c++/src/capnp/{layout.c++ => layout.cpp} (99%)
 rename c++/src/capnp/{list.c++ => list.cpp} (100%)
 rename c++/src/capnp/{llvm-fuzzer-testcase.c++ => llvm-fuzzer-testcase.cpp} (100%)
 rename c++/src/capnp/{membrane-test.c++ => membrane-test.cpp} (100%)
 rename c++/src/capnp/{membrane.c++ => membrane.cpp} (100%)
 rename c++/src/capnp/{message-test.c++ => message-test.cpp} (100%)
 rename c++/src/capnp/{message.c++ => message.cpp} (100%)
 rename c++/src/capnp/{orphan-test.c++ => orphan-test.cpp} (100%)
 rename c++/src/capnp/{persistent.capnp.c++ => persistent.capnp.cpp} (100%)
 rename c++/src/capnp/{reconnect-test.c++ => reconnect-test.cpp} (100%)
 rename c++/src/capnp/{reconnect.c++ => reconnect.cpp} (100%)
 rename c++/src/capnp/{rpc-test.c++ => rpc-test.cpp} (100%)
 rename c++/src/capnp/{rpc-twoparty-test.c++ => rpc-twoparty-test.cpp} (99%)
 rename c++/src/capnp/{rpc-twoparty.capnp.c++ => rpc-twoparty.capnp.cpp} (100%)
 rename c++/src/capnp/{rpc-twoparty.c++ => rpc-twoparty.cpp} (100%)
 rename c++/src/capnp/{rpc.capnp.c++ => rpc.capnp.cpp} (100%)
 rename c++/src/capnp/{rpc.c++ => rpc.cpp} (99%)
 rename c++/src/capnp/{schema-loader-test.c++ => schema-loader-test.cpp} (99%)
 rename c++/src/capnp/{schema-loader.c++ => schema-loader.cpp} (100%)
 rename c++/src/capnp/{schema-parser-test.c++ => schema-parser-test.cpp} (100%)
 rename c++/src/capnp/{schema-parser.c++ => schema-parser.cpp} (100%)
 rename c++/src/capnp/{schema-test.c++ => schema-test.cpp} (100%)
 rename c++/src/capnp/{schema.capnp.c++ => schema.capnp.cpp} (100%)
 rename c++/src/capnp/{schema.c++ => schema.cpp} (100%)
 rename c++/src/capnp/{serialize-async-test.c++ => serialize-async-test.cpp} (100%)
 rename c++/src/capnp/{serialize-async.c++ => serialize-async.cpp} (100%)
 rename c++/src/capnp/{serialize-packed-test.c++ => serialize-packed-test.cpp} (100%)
 rename c++/src/capnp/{serialize-packed.c++ => serialize-packed.cpp} (100%)
 rename c++/src/capnp/{serialize-test.c++ => serialize-test.cpp} (100%)
 rename c++/src/capnp/{serialize-text-test.c++ => serialize-text-test.cpp} (100%)
 rename c++/src/capnp/{serialize-text.c++ => serialize-text.cpp} (100%)
 rename c++/src/capnp/{serialize.c++ => serialize.cpp} (100%)
 rename c++/src/capnp/{stream.capnp.c++ => stream.capnp.cpp} (100%)
 rename c++/src/capnp/{stringify-test.c++ => stringify-test.cpp} (100%)
 rename c++/src/capnp/{stringify.c++ => stringify.cpp} (100%)
 rename c++/src/capnp/{test-util.c++ => test-util.cpp} (100%)
 rename c++/src/kj/{arena-test.c++ => arena-test.cpp} (100%)
 rename c++/src/kj/{arena.c++ => arena.cpp} (100%)
 rename c++/src/kj/{array-test.c++ => array-test.cpp} (100%)
 rename c++/src/kj/{array.c++ => array.cpp} (100%)
 rename c++/src/kj/{async-coroutine-test.c++ => async-coroutine-test.cpp} (99%)
 rename c++/src/kj/{async-io-test.c++ => async-io-test.cpp} (99%)
 rename c++/src/kj/{async-io-unix.c++ => async-io-unix.cpp} (99%)
 rename c++/src/kj/{async-io-win32.c++ => async-io-win32.cpp} (99%)
 rename c++/src/kj/{async-io.c++ => async-io.cpp} (100%)
 rename c++/src/kj/{async-queue-test.c++ => async-queue-test.cpp} (100%)
 rename c++/src/kj/{async-test.c++ => async-test.cpp} (100%)
 rename c++/src/kj/{async-unix-test.c++ => async-unix-test.cpp} (100%)
 rename c++/src/kj/{async-unix-xthread-test.c++ => async-unix-xthread-test.cpp} (97%)
 rename c++/src/kj/{async-unix.c++ => async-unix.cpp} (99%)
 rename c++/src/kj/{async-win32-test.c++ => async-win32-test.cpp} (100%)
 rename c++/src/kj/{async-win32-xthread-test.c++ => async-win32-xthread-test.cpp} (97%)
 rename c++/src/kj/{async-win32.c++ => async-win32.cpp} (100%)
 rename c++/src/kj/{async-xthread-test.c++ => async-xthread-test.cpp} (99%)
 rename c++/src/kj/{async.c++ => async.cpp} (100%)
 rename c++/src/kj/{cidr.c++ => cidr.cpp} (100%)
 rename c++/src/kj/{common-test.c++ => common-test.cpp} (99%)
 rename c++/src/kj/{common.c++ => common.cpp} (100%)
 rename c++/src/kj/compat/{brotli-test.c++ => brotli-test.cpp} (100%)
 rename c++/src/kj/compat/{brotli.c++ => brotli.cpp} (100%)
 rename c++/src/kj/compat/{gzip-test.c++ => gzip-test.cpp} (100%)
 rename c++/src/kj/compat/{gzip.c++ => gzip.cpp} (100%)
 rename c++/src/kj/compat/{http-socketpair-test.c++ => http-socketpair-test.cpp} (98%)
 rename c++/src/kj/compat/{http-test.c++ => http-test.cpp} (99%)
 rename c++/src/kj/compat/{http.c++ => http.cpp} (100%)
 rename c++/src/kj/compat/{readiness-io-test.c++ => readiness-io-test.cpp} (100%)
 rename c++/src/kj/compat/{readiness-io.c++ => readiness-io.cpp} (100%)
 rename c++/src/kj/compat/{tls-test.c++ => tls-test.cpp} (100%)
 rename c++/src/kj/compat/{tls.c++ => tls.cpp} (99%)
 rename c++/src/kj/compat/{url-test.c++ => url-test.cpp} (100%)
 rename c++/src/kj/compat/{url.c++ => url.cpp} (100%)
 rename c++/src/kj/{debug-test.c++ => debug-test.cpp} (100%)
 rename c++/src/kj/{debug.c++ => debug.cpp} (100%)
 rename c++/src/kj/{encoding-test.c++ => encoding-test.cpp} (100%)
 rename c++/src/kj/{encoding.c++ => encoding.cpp} (100%)
 rename c++/src/kj/{exception-override-symbolizer-test.c++ => exception-override-symbolizer-test.cpp} (100%)
 rename c++/src/kj/{exception-test.c++ => exception-test.cpp} (98%)
 rename c++/src/kj/{exception.c++ => exception.cpp} (99%)
 rename c++/src/kj/{filesystem-disk-generic-test.c++ => filesystem-disk-generic-test.cpp} (89%)
 rename c++/src/kj/{filesystem-disk-old-kernel-test.c++ => filesystem-disk-old-kernel-test.cpp} (97%)
 rename c++/src/kj/{filesystem-disk-test.c++ => filesystem-disk-test.cpp} (99%)
 rename c++/src/kj/{filesystem-disk-unix.c++ => filesystem-disk-unix.cpp} (100%)
 rename c++/src/kj/{filesystem-disk-win32.c++ => filesystem-disk-win32.cpp} (99%)
 rename c++/src/kj/{filesystem-test.c++ => filesystem-test.cpp} (100%)
 rename c++/src/kj/{filesystem.c++ => filesystem.cpp} (100%)
 rename c++/src/kj/{function-test.c++ => function-test.cpp} (100%)
 rename c++/src/kj/{hash.c++ => hash.cpp} (100%)
 rename c++/src/kj/{io-test.c++ => io-test.cpp} (100%)
 rename c++/src/kj/{io.c++ => io.cpp} (100%)
 rename c++/src/kj/{list-test.c++ => list-test.cpp} (100%)
 rename c++/src/kj/{list.c++ => list.cpp} (100%)
 rename c++/src/kj/{main.c++ => main.cpp} (100%)
 rename c++/src/kj/{map-test.c++ => map-test.cpp} (100%)
 rename c++/src/kj/{memory-test.c++ => memory-test.cpp} (100%)
 rename c++/src/kj/{memory.c++ => memory.cpp} (100%)
 rename c++/src/kj/{mutex-test.c++ => mutex-test.cpp} (100%)
 rename c++/src/kj/{mutex.c++ => mutex.cpp} (100%)
 rename c++/src/kj/{one-of-test.c++ => one-of-test.cpp} (100%)
 rename c++/src/kj/parse/{char-test.c++ => char-test.cpp} (100%)
 rename c++/src/kj/parse/{char.c++ => char.cpp} (100%)
 rename c++/src/kj/parse/{common-test.c++ => common-test.cpp} (100%)
 rename c++/src/kj/{refcount-test.c++ => refcount-test.cpp} (100%)
 rename c++/src/kj/{refcount.c++ => refcount.cpp} (100%)
 rename c++/src/kj/{source-location.c++ => source-location.cpp} (100%)
 rename c++/src/kj/std/{iostream-test.c++ => iostream-test.cpp} (100%)
 rename c++/src/kj/{string-test.c++ => string-test.cpp} (100%)
 rename c++/src/kj/{string-tree-test.c++ => string-tree-test.cpp} (100%)
 rename c++/src/kj/{string-tree.c++ => string-tree.cpp} (100%)
 rename c++/src/kj/{string.c++ => string.cpp} (100%)
 rename c++/src/kj/{table-test.c++ => table-test.cpp} (100%)
 rename c++/src/kj/{table.c++ => table.cpp} (100%)
 rename c++/src/kj/{test-helpers.c++ => test-helpers.cpp} (100%)
 rename c++/src/kj/{test-test.c++ => test-test.cpp} (100%)
 rename c++/src/kj/{test.c++ => test.cpp} (100%)
 rename c++/src/kj/{thread-test.c++ => thread-test.cpp} (100%)
 rename c++/src/kj/{thread.c++ => thread.cpp} (100%)
 rename c++/src/kj/{threadlocal-test.c++ => threadlocal-test.cpp} (100%)
 rename c++/src/kj/{time-test.c++ => time-test.cpp} (100%)
 rename c++/src/kj/{time.c++ => time.cpp} (100%)
 rename c++/src/kj/{timer.c++ => timer.cpp} (100%)
 rename c++/src/kj/{tuple-test.c++ => tuple-test.cpp} (100%)
 rename c++/src/kj/{units-test.c++ => units-test.cpp} (100%)
 rename c++/src/kj/{units.c++ => units.cpp} (100%)

diff --git a/c++/samples/addressbook.c++ b/c++/samples/addressbook.cpp
similarity index 100%
rename from c++/samples/addressbook.c++
rename to c++/samples/addressbook.cpp
diff --git a/c++/samples/calculator-client.c++ b/c++/samples/calculator-client.cpp
similarity index 100%
rename from c++/samples/calculator-client.c++
rename to c++/samples/calculator-client.cpp
diff --git a/c++/samples/calculator-server.c++ b/c++/samples/calculator-server.cpp
similarity index 100%
rename from c++/samples/calculator-server.c++
rename to c++/samples/calculator-server.cpp
diff --git a/c++/src/benchmark/capnproto-carsales.c++ b/c++/src/benchmark/capnproto-carsales.cpp
similarity index 100%
rename from c++/src/benchmark/capnproto-carsales.c++
rename to c++/src/benchmark/capnproto-carsales.cpp
diff --git a/c++/src/benchmark/capnproto-catrank.c++ b/c++/src/benchmark/capnproto-catrank.cpp
similarity index 100%
rename from c++/src/benchmark/capnproto-catrank.c++
rename to c++/src/benchmark/capnproto-catrank.cpp
diff --git a/c++/src/benchmark/capnproto-eval.c++ b/c++/src/benchmark/capnproto-eval.cpp
similarity index 100%
rename from c++/src/benchmark/capnproto-eval.c++
rename to c++/src/benchmark/capnproto-eval.cpp
diff --git a/c++/src/benchmark/null-carsales.c++ b/c++/src/benchmark/null-carsales.cpp
similarity index 100%
rename from c++/src/benchmark/null-carsales.c++
rename to c++/src/benchmark/null-carsales.cpp
diff --git a/c++/src/benchmark/null-catrank.c++ b/c++/src/benchmark/null-catrank.cpp
similarity index 100%
rename from c++/src/benchmark/null-catrank.c++
rename to c++/src/benchmark/null-catrank.cpp
diff --git a/c++/src/benchmark/null-eval.c++ b/c++/src/benchmark/null-eval.cpp
similarity index 100%
rename from c++/src/benchmark/null-eval.c++
rename to c++/src/benchmark/null-eval.cpp
diff --git a/c++/src/benchmark/protobuf-carsales.c++ b/c++/src/benchmark/protobuf-carsales.cpp
similarity index 100%
rename from c++/src/benchmark/protobuf-carsales.c++
rename to c++/src/benchmark/protobuf-carsales.cpp
diff --git a/c++/src/benchmark/protobuf-catrank.c++ b/c++/src/benchmark/protobuf-catrank.cpp
similarity index 100%
rename from c++/src/benchmark/protobuf-catrank.c++
rename to c++/src/benchmark/protobuf-catrank.cpp
diff --git a/c++/src/benchmark/protobuf-eval.c++ b/c++/src/benchmark/protobuf-eval.cpp
similarity index 100%
rename from c++/src/benchmark/protobuf-eval.c++
rename to c++/src/benchmark/protobuf-eval.cpp
diff --git a/c++/src/benchmark/runner.c++ b/c++/src/benchmark/runner.cpp
similarity index 99%
rename from c++/src/benchmark/runner.c++
rename to c++/src/benchmark/runner.cpp
index 15532492..5a86af9e 100644
--- a/c++/src/benchmark/runner.c++
+++ b/c++/src/benchmark/runner.cpp
@@ -512,7 +512,7 @@ int main(int argc, char* argv[]) {
   size_t capnpBinarySize = fileSize("capnproto-" + std::string(testCaseName(testCase)));
   size_t protobufCodeSize = fileSize(std::string(testCaseName(testCase)) + ".pb.cc")
                           + fileSize(std::string(testCaseName(testCase)) + ".pb.h");
-  size_t capnpCodeSize = fileSize(std::string(testCaseName(testCase)) + ".capnp.c++")
+  size_t capnpCodeSize = fileSize(std::string(testCaseName(testCase)) + ".capnp.cpp")
                        + fileSize(std::string(testCaseName(testCase)) + ".capnp.h");
   size_t protobufObjSize = fileSize(std::string(testCaseName(testCase)) + ".pb.o");
   size_t capnpObjSize = fileSize(std::string(testCaseName(testCase)) + ".capnp.o");
@@ -567,7 +567,7 @@ int main(int argc, char* argv[]) {
     reportResults("Old Cap'n Proto packed I/O", iters, oldCapnpPacked);
 
     oldCapnpBinarySize = fileSize("capnproto-" + std::string(testCaseName(testCase)));
-    oldCapnpCodeSize = fileSize(std::string(testCaseName(testCase)) + ".capnp.c++")
+    oldCapnpCodeSize = fileSize(std::string(testCaseName(testCase)) + ".capnp.cpp")
                      + fileSize(std::string(testCaseName(testCase)) + ".capnp.h");
     oldCapnpObjSize = fileSize(std::string(testCaseName(testCase)) + ".capnp.o");
   }
diff --git a/c++/src/capnp/BUILD.bazel b/c++/src/capnp/BUILD.bazel
index f11a7a24..a5527495 100644
--- a/c++/src/capnp/BUILD.bazel
+++ b/c++/src/capnp/BUILD.bazel
@@ -3,21 +3,21 @@ load("@capnp-cpp//src/capnp:cc_capnp_library.bzl", "cc_capnp_library")
 cc_library(
     name = "capnp",
     srcs = [
-        "any.c++",
-        "arena.c++",
-        "blob.c++",
-        "c++.capnp.c++",
-        "dynamic.c++",
-        "layout.c++",
-        "list.c++",
-        "message.c++",
-        "schema.c++",
-        "schema.capnp.c++",
-        "schema-loader.c++",
-        "serialize.c++",
-        "serialize-packed.c++",
-        "stream.capnp.c++",
-        "stringify.c++",
+        "any.cpp",
+        "arena.cpp",
+        "blob.cpp",
+        "c++.capnp.cpp",
+        "dynamic.cpp",
+        "layout.cpp",
+        "list.cpp",
+        "message.cpp",
+        "schema.cpp",
+        "schema.capnp.cpp",
+        "schema-loader.cpp",
+        "serialize.cpp",
+        "serialize-packed.cpp",
+        "stream.capnp.cpp",
+        "stringify.cpp",
     ],
     hdrs = [
         "any.h",
@@ -58,17 +58,17 @@ cc_library(
 cc_library(
     name = "capnp-rpc",
     srcs = [
-        "capability.c++",
-        "dynamic-capability.c++",
-        "ez-rpc.c++",
-        "membrane.c++",
-        "persistent.capnp.c++",
-        "reconnect.c++",
-        "rpc.c++",
-        "rpc.capnp.c++",
-        "rpc-twoparty.c++",
-        "rpc-twoparty.capnp.c++",
-        "serialize-async.c++",
+        "capability.cpp",
+        "dynamic-capability.cpp",
+        "ez-rpc.cpp",
+        "membrane.cpp",
+        "persistent.capnp.cpp",
+        "reconnect.cpp",
+        "rpc.cpp",
+        "rpc.capnp.cpp",
+        "rpc-twoparty.cpp",
+        "rpc-twoparty.capnp.cpp",
+        "serialize-async.cpp",
     ],
     hdrs = [
         "ez-rpc.h",
@@ -90,17 +90,17 @@ cc_library(
 cc_library(
     name = "capnpc",
     srcs = [
-        "compiler/compiler.c++",
-        "compiler/error-reporter.c++",
-        "compiler/generics.c++",
-        "compiler/grammar.capnp.c++",
-        "compiler/lexer.c++",
-        "compiler/lexer.capnp.c++",
-        "compiler/node-translator.c++",
-        "compiler/parser.c++",
-        "compiler/type-id.c++",
-        "schema-parser.c++",
-        "serialize-text.c++",
+        "compiler/compiler.cpp",
+        "compiler/error-reporter.cpp",
+        "compiler/generics.cpp",
+        "compiler/grammar.capnp.cpp",
+        "compiler/lexer.cpp",
+        "compiler/lexer.capnp.cpp",
+        "compiler/node-translator.cpp",
+        "compiler/parser.cpp",
+        "compiler/type-id.cpp",
+        "schema-parser.cpp",
+        "serialize-text.cpp",
     ],
     hdrs = [
         "compiler/compiler.h",
@@ -125,8 +125,8 @@ cc_library(
 cc_binary(
     name = "capnp_tool",
     srcs = [
-        "compiler/capnp.c++",
-        "compiler/module-loader.c++",
+        "compiler/capnp.cpp",
+        "compiler/module-loader.cpp",
     ],
     visibility = ["//visibility:public"],
     deps = [
@@ -138,7 +138,7 @@ cc_binary(
 cc_binary(
     name = "capnpc-c++",
     srcs = [
-        "compiler/capnpc-c++.c++",
+        "compiler/capnpc-c++.cpp",
     ],
     visibility = ["//visibility:public"],
     deps = [
@@ -149,7 +149,7 @@ cc_binary(
 cc_binary(
     name = "capnpc-capnp",
     srcs = [
-        "compiler/capnpc-capnp.c++",
+        "compiler/capnpc-capnp.cpp",
     ],
     visibility = ["//visibility:public"],
     deps = [
@@ -204,7 +204,7 @@ cc_capnp_library(
 
 cc_library(
     name = "capnp-test",
-    srcs = ["test-util.c++"],
+    srcs = ["test-util.cpp"],
     hdrs = ["test-util.h"],
     deps = [
         ":capnp-rpc",
@@ -216,41 +216,41 @@ cc_library(
 )
 
 [cc_test(
-    name = f.removesuffix(".c++"),
+    name = f.removesuffix(".cpp"),
     srcs = [f],
     deps = [":capnp-test"],
 ) for f in [
-    "any-test.c++",
-    "blob-test.c++",
-    "canonicalize-test.c++",
-    "common-test.c++",
-    "capability-test.c++",
-    "compiler/lexer-test.c++",
-    "compiler/type-id-test.c++",
-    "dynamic-test.c++",
-    "encoding-test.c++",
-    "endian-test.c++",
-    "ez-rpc-test.c++",
-    "layout-test.c++",
-    "membrane-test.c++",
-    "message-test.c++",
-    "orphan-test.c++",
-    "reconnect-test.c++",
-    "rpc-test.c++",
-    "rpc-twoparty-test.c++",
-    "schema-test.c++",
-    "schema-loader-test.c++",
-    "schema-parser-test.c++",
-    "serialize-async-test.c++",
-    "serialize-packed-test.c++",
-    "serialize-test.c++",
-    "serialize-text-test.c++",
-    "stringify-test.c++",
+    "any-test.cpp",
+    "blob-test.cpp",
+    "canonicalize-test.cpp",
+    "common-test.cpp",
+    "capability-test.cpp",
+    "compiler/lexer-test.cpp",
+    "compiler/type-id-test.cpp",
+    "dynamic-test.cpp",
+    "encoding-test.cpp",
+    "endian-test.cpp",
+    "ez-rpc-test.cpp",
+    "layout-test.cpp",
+    "membrane-test.cpp",
+    "message-test.cpp",
+    "orphan-test.cpp",
+    "reconnect-test.cpp",
+    "rpc-test.cpp",
+    "rpc-twoparty-test.cpp",
+    "schema-test.cpp",
+    "schema-loader-test.cpp",
+    "schema-parser-test.cpp",
+    "serialize-async-test.cpp",
+    "serialize-packed-test.cpp",
+    "serialize-test.cpp",
+    "serialize-text-test.cpp",
+    "stringify-test.cpp",
 ]]
 
 cc_test(
     name = "endian-reverse-test",
-    srcs = ["endian-reverse-test.c++"],
+    srcs = ["endian-reverse-test.cpp"],
     deps = [":capnp-test"],
     target_compatible_with = select({
         "@platforms//os:windows": ["@platforms//:incompatible"],
@@ -260,19 +260,19 @@ cc_test(
 
 cc_library(
     name = "endian-test-base",
-    hdrs = ["endian-test.c++"],
+    hdrs = ["endian-test.cpp"],
     deps = [":capnp-test"],
 )
 
 cc_test(
     name = "endian-fallback-test",
-    srcs = ["endian-fallback-test.c++"],
+    srcs = ["endian-fallback-test.cpp"],
     deps = [":endian-test-base"],
 )
 
 cc_test(
     name = "fuzz-test",
     size = "large",
-    srcs = ["fuzz-test.c++"],
+    srcs = ["fuzz-test.cpp"],
     deps = [":capnp-test"],
 )
diff --git a/c++/src/capnp/CMakeLists.txt b/c++/src/capnp/CMakeLists.txt
index 9980fde6..d21cd893 100644
--- a/c++/src/capnp/CMakeLists.txt
+++ b/c++/src/capnp/CMakeLists.txt
@@ -2,23 +2,23 @@
 # capnp ========================================================================
 
 set(capnp_sources_lite
-  c++.capnp.c++
-  blob.c++
-  arena.c++
-  layout.c++
-  list.c++
-  any.c++
-  message.c++
-  schema.capnp.c++
-  stream.capnp.c++
-  serialize.c++
-  serialize-packed.c++
+  c++.capnp.cpp
+  blob.cpp
+  arena.cpp
+  layout.cpp
+  list.cpp
+  any.cpp
+  message.cpp
+  schema.capnp.cpp
+  stream.capnp.cpp
+  serialize.cpp
+  serialize-packed.cpp
 )
 set(capnp_sources_heavy
-  schema.c++
-  schema-loader.c++
-  dynamic.c++
-  stringify.c++
+  schema.cpp
+  schema-loader.cpp
+  dynamic.cpp
+  stringify.cpp
 )
 if(NOT CAPNP_LITE)
   set(capnp_sources ${capnp_sources_lite} ${capnp_sources_heavy})
@@ -78,16 +78,16 @@ install(FILES ${capnp_headers} ${capnp_schemas} DESTINATION "${CMAKE_INSTALL_INC
 install(FILES ${capnp_compat_headers} DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/capnp/compat")
 
 set(capnp-rpc_sources
-  serialize-async.c++
-  capability.c++
-  membrane.c++
-  dynamic-capability.c++
-  rpc.c++
-  rpc.capnp.c++
-  rpc-twoparty.c++
-  rpc-twoparty.capnp.c++
-  persistent.capnp.c++
-  ez-rpc.c++
+  serialize-async.cpp
+  capability.cpp
+  membrane.cpp
+  dynamic-capability.cpp
+  rpc.cpp
+  rpc.capnp.cpp
+  rpc-twoparty.cpp
+  rpc-twoparty.capnp.cpp
+  persistent.capnp.cpp
+  ez-rpc.cpp
 )
 set(capnp-rpc_headers
   rpc-prelude.h
@@ -116,8 +116,8 @@ endif()
 # capnp-json ========================================================================
 
 set(capnp-json_sources
-  compat/json.c++
-  compat/json.capnp.c++
+  compat/json.cpp
+  compat/json.capnp.cpp
 )
 set(capnp-json_headers
   compat/json.h
@@ -139,7 +139,7 @@ endif()
 # capnp-websocket ========================================================================
 
 set(capnp-websocket_sources
-  compat/websocket-rpc.c++
+  compat/websocket-rpc.cpp
 )
 set(capnp-websocket_headers
   compat/websocket-rpc.h
@@ -157,17 +157,17 @@ endif()
 # Tools/Compilers ==============================================================
 
 set(capnpc_sources
-  compiler/type-id.c++
-  compiler/error-reporter.c++
-  compiler/lexer.capnp.c++
-  compiler/lexer.c++
-  compiler/grammar.capnp.c++
-  compiler/parser.c++
-  compiler/generics.c++
-  compiler/node-translator.c++
-  compiler/compiler.c++
-  schema-parser.c++
-  serialize-text.c++
+  compiler/type-id.cpp
+  compiler/error-reporter.cpp
+  compiler/lexer.capnp.cpp
+  compiler/lexer.cpp
+  compiler/grammar.capnp.cpp
+  compiler/parser.cpp
+  compiler/generics.cpp
+  compiler/node-translator.cpp
+  compiler/compiler.cpp
+  schema-parser.cpp
+  serialize-text.cpp
 )
 if(NOT CAPNP_LITE)
   add_library(capnpc ${capnpc_sources})
@@ -180,8 +180,8 @@ endif()
 
 if(NOT CAPNP_LITE)
   add_executable(capnp_tool
-    compiler/module-loader.c++
-    compiler/capnp.c++
+    compiler/module-loader.cpp
+    compiler/capnp.cpp
   )
   target_link_libraries(capnp_tool capnpc capnp-json capnp kj)
   set_target_properties(capnp_tool PROPERTIES OUTPUT_NAME capnp)
@@ -194,7 +194,7 @@ if(NOT CAPNP_LITE)
   )
 
   add_executable(capnpc_cpp
-    compiler/capnpc-c++.c++
+    compiler/capnpc-c++.cpp
   )
   target_link_libraries(capnpc_cpp capnp kj)
   set_target_properties(capnpc_cpp PROPERTIES OUTPUT_NAME capnpc-c++)
@@ -205,7 +205,7 @@ if(NOT CAPNP_LITE)
   )
 
   add_executable(capnpc_capnp
-    compiler/capnpc-capnp.c++
+    compiler/capnpc-capnp.cpp
   )
   target_link_libraries(capnpc_capnp capnp kj)
   set_target_properties(capnpc_capnp PROPERTIES OUTPUT_NAME capnpc-capnp)
@@ -256,20 +256,20 @@ if(BUILD_TESTING)
   endif()
 
   add_executable(capnp-tests
-    common-test.c++
-    blob-test.c++
-    endian-test.c++
-    endian-fallback-test.c++
-    layout-test.c++
-    any-test.c++
-    message-test.c++
-    encoding-test.c++
-    orphan-test.c++
-    serialize-test.c++
-    serialize-packed-test.c++
-    canonicalize-test.c++
-    fuzz-test.c++
-    test-util.c++
+    common-test.cpp
+    blob-test.cpp
+    endian-test.cpp
+    endian-fallback-test.cpp
+    layout-test.cpp
+    any-test.cpp
+    message-test.cpp
+    encoding-test.cpp
+    orphan-test.cpp
+    serialize-test.cpp
+    serialize-packed-test.cpp
+    canonicalize-test.cpp
+    fuzz-test.cpp
+    test-util.cpp
     ${test_capnp_cpp_files}
     ${test_capnp_h_files}
   )
@@ -280,24 +280,24 @@ if(BUILD_TESTING)
 
   if(NOT CAPNP_LITE)
     add_executable(capnp-heavy-tests
-      endian-reverse-test.c++
-      capability-test.c++
-      membrane-test.c++
-      schema-test.c++
-      schema-loader-test.c++
-      schema-parser-test.c++
-      dynamic-test.c++
-      stringify-test.c++
-      serialize-async-test.c++
-      serialize-text-test.c++
-      rpc-test.c++
-      rpc-twoparty-test.c++
-      ez-rpc-test.c++
-      compiler/lexer-test.c++
-      compiler/type-id-test.c++
-      test-util.c++
-      compat/json-test.c++
-      compat/websocket-rpc-test.c++
+      endian-reverse-test.cpp
+      capability-test.cpp
+      membrane-test.cpp
+      schema-test.cpp
+      schema-loader-test.cpp
+      schema-parser-test.cpp
+      dynamic-test.cpp
+      stringify-test.cpp
+      serialize-async-test.cpp
+      serialize-text-test.cpp
+      rpc-test.cpp
+      rpc-twoparty-test.cpp
+      ez-rpc-test.cpp
+      compiler/lexer-test.cpp
+      compiler/type-id-test.cpp
+      test-util.cpp
+      compat/json-test.cpp
+      compat/websocket-rpc-test.cpp
       ${test_capnp_cpp_files}
       ${test_capnp_h_files}
     )
@@ -312,7 +312,7 @@ if(BUILD_TESTING)
     add_dependencies(check capnp-heavy-tests)
     add_test(NAME capnp-heavy-tests-run COMMAND capnp-heavy-tests)
 
-    add_executable(capnp-evolution-tests compiler/evolution-test.c++)
+    add_executable(capnp-evolution-tests compiler/evolution-test.cpp)
     target_link_libraries(capnp-evolution-tests capnpc capnp kj)
     add_dependencies(check capnp-evolution-tests)
     add_test(NAME capnp-evolution-tests-run COMMAND capnp-evolution-tests)
@@ -320,6 +320,6 @@ if(BUILD_TESTING)
 endif()  # BUILD_TESTING
 
 if(DEFINED ENV{LIB_FUZZING_ENGINE})
-  add_executable(capnp_llvm_fuzzer_testcase llvm-fuzzer-testcase.c++ test-util.c++ test-util.h ${test_capnp_cpp_files} ${test_capnp_h_files})
+  add_executable(capnp_llvm_fuzzer_testcase llvm-fuzzer-testcase.cpp test-util.cpp test-util.h ${test_capnp_cpp_files} ${test_capnp_h_files})
   target_link_libraries(capnp_llvm_fuzzer_testcase capnp-rpc capnp kj kj-async capnp-json $ENV{LIB_FUZZING_ENGINE})
 endif()
diff --git a/c++/src/capnp/afl-testcase.c++ b/c++/src/capnp/afl-testcase.cpp
similarity index 100%
rename from c++/src/capnp/afl-testcase.c++
rename to c++/src/capnp/afl-testcase.cpp
diff --git a/c++/src/capnp/any-test.c++ b/c++/src/capnp/any-test.cpp
similarity index 100%
rename from c++/src/capnp/any-test.c++
rename to c++/src/capnp/any-test.cpp
diff --git a/c++/src/capnp/any.c++ b/c++/src/capnp/any.cpp
similarity index 100%
rename from c++/src/capnp/any.c++
rename to c++/src/capnp/any.cpp
diff --git a/c++/src/capnp/arena.c++ b/c++/src/capnp/arena.cpp
similarity index 100%
rename from c++/src/capnp/arena.c++
rename to c++/src/capnp/arena.cpp
diff --git a/c++/src/capnp/arena.h b/c++/src/capnp/arena.h
index aeaff844..94a72b95 100644
--- a/c++/src/capnp/arena.h
+++ b/c++/src/capnp/arena.h
@@ -120,7 +120,7 @@ private:
 
 #if !CAPNP_LITE
 class BrokenCapFactory {
-  // Callback for constructing broken caps.  We use this so that we can avoid arena.c++ having a
+  // Callback for constructing broken caps.  We use this so that we can avoid arena.cpp having a
   // link-time dependency on capability code that lives in libcapnp-rpc.
 
 public:
diff --git a/c++/src/capnp/blob-test.c++ b/c++/src/capnp/blob-test.cpp
similarity index 100%
rename from c++/src/capnp/blob-test.c++
rename to c++/src/capnp/blob-test.cpp
diff --git a/c++/src/capnp/blob.c++ b/c++/src/capnp/blob.cpp
similarity index 100%
rename from c++/src/capnp/blob.c++
rename to c++/src/capnp/blob.cpp
diff --git a/c++/src/capnp/c++.capnp.c++ b/c++/src/capnp/c++.capnp.cpp
similarity index 100%
rename from c++/src/capnp/c++.capnp.c++
rename to c++/src/capnp/c++.capnp.cpp
diff --git a/c++/src/capnp/canonicalize-test.c++ b/c++/src/capnp/canonicalize-test.cpp
similarity index 100%
rename from c++/src/capnp/canonicalize-test.c++
rename to c++/src/capnp/canonicalize-test.cpp
diff --git a/c++/src/capnp/capability-test.c++ b/c++/src/capnp/capability-test.cpp
similarity index 100%
rename from c++/src/capnp/capability-test.c++
rename to c++/src/capnp/capability-test.cpp
diff --git a/c++/src/capnp/capability.c++ b/c++/src/capnp/capability.cpp
similarity index 99%
rename from c++/src/capnp/capability.c++
rename to c++/src/capnp/capability.cpp
index 9462c6c2..95f3f6d9 100644
--- a/c++/src/capnp/capability.c++
+++ b/c++/src/capnp/capability.cpp
@@ -35,7 +35,7 @@ namespace capnp {
 namespace _ {
 
 void setGlobalBrokenCapFactoryForLayoutCpp(BrokenCapFactory& factory);
-// Defined in layout.c++.
+// Defined in layout.cpp.
 
 }  // namespace _
 
diff --git a/c++/src/capnp/capability.h b/c++/src/capnp/capability.h
index 1e71840a..58fe88ba 100644
--- a/c++/src/capnp/capability.h
+++ b/c++/src/capnp/capability.h
@@ -70,7 +70,7 @@ public:
 
 class LocalClient;
 namespace _ { // private
-extern const RawSchema NULL_INTERFACE_SCHEMA;  // defined in schema.c++
+extern const RawSchema NULL_INTERFACE_SCHEMA;  // defined in schema.cpp
 class CapabilityServerSetBase;
 struct PipelineBuilderPair;
 }  // namespace _ (private)
diff --git a/c++/src/capnp/cc_capnp_library.bzl b/c++/src/capnp/cc_capnp_library.bzl
index 9e4acd35..b20889a5 100644
--- a/c++/src/capnp/cc_capnp_library.bzl
+++ b/c++/src/capnp/cc_capnp_library.bzl
@@ -105,7 +105,7 @@ def cc_capnp_library(
     """
 
     hdrs = [s + ".h" for s in srcs]
-    srcs_cpp = [s + ".c++" for s in srcs]
+    srcs_cpp = [s + ".cpp" for s in srcs]
 
     _capnp_gen(
         name = name + "_gen",
diff --git a/c++/src/capnp/common-test.c++ b/c++/src/capnp/common-test.cpp
similarity index 100%
rename from c++/src/capnp/common-test.c++
rename to c++/src/capnp/common-test.cpp
diff --git a/c++/src/capnp/compat/BUILD.bazel b/c++/src/capnp/compat/BUILD.bazel
index fcaecfa3..880c87e0 100644
--- a/c++/src/capnp/compat/BUILD.bazel
+++ b/c++/src/capnp/compat/BUILD.bazel
@@ -9,8 +9,8 @@ exports_files([
 cc_library(
     name = "json",
     srcs = [
-        "json.c++",
-        "json.capnp.c++",
+        "json.cpp",
+        "json.capnp.cpp",
     ],
     hdrs = [
         "json.capnp.h",
@@ -37,8 +37,8 @@ cc_capnp_library(
 cc_library(
     name = "http-over-capnp",
     srcs = [
-        "byte-stream.c++",
-        "http-over-capnp.c++",
+        "byte-stream.cpp",
+        "http-over-capnp.cpp",
     ],
     hdrs = [
         "byte-stream.h",
@@ -55,7 +55,7 @@ cc_library(
 cc_library(
     name = "websocket-rpc",
     srcs = [
-        "websocket-rpc.c++",
+        "websocket-rpc.cpp",
     ],
     hdrs = [
         "websocket-rpc.h",
@@ -69,7 +69,7 @@ cc_library(
 )
 
 [cc_test(
-    name = f.removesuffix(".c++"),
+    name = f.removesuffix(".cpp"),
     srcs = [f],
     deps = [
         ":websocket-rpc",
@@ -77,19 +77,19 @@ cc_library(
         "//src/capnp:capnp-test"
     ],
 ) for f in [
-    "byte-stream-test.c++",
-    "http-over-capnp-test.c++",
-    "websocket-rpc-test.c++",
+    "byte-stream-test.cpp",
+    "http-over-capnp-test.cpp",
+    "websocket-rpc-test.cpp",
 ]]
 
 cc_library(
     name = "http-over-capnp-test-as-header",
-    hdrs = ["http-over-capnp-test.c++"],
+    hdrs = ["http-over-capnp-test.cpp"],
 )
 
 cc_test(
     name = "http-over-capnp-old-test",
-    srcs = ["http-over-capnp-old-test.c++"],
+    srcs = ["http-over-capnp-old-test.cpp"],
     deps = [
         ":http-over-capnp-test-as-header",
         ":http-over-capnp",
diff --git a/c++/src/capnp/compat/byte-stream-test.c++ b/c++/src/capnp/compat/byte-stream-test.cpp
similarity index 100%
rename from c++/src/capnp/compat/byte-stream-test.c++
rename to c++/src/capnp/compat/byte-stream-test.cpp
diff --git a/c++/src/capnp/compat/byte-stream.c++ b/c++/src/capnp/compat/byte-stream.cpp
similarity index 100%
rename from c++/src/capnp/compat/byte-stream.c++
rename to c++/src/capnp/compat/byte-stream.cpp
diff --git a/c++/src/capnp/compat/http-over-capnp-old-test.c++ b/c++/src/capnp/compat/http-over-capnp-old-test.cpp
similarity index 65%
rename from c++/src/capnp/compat/http-over-capnp-old-test.c++
rename to c++/src/capnp/compat/http-over-capnp-old-test.cpp
index 9a5aea9b..d22354b4 100644
--- a/c++/src/capnp/compat/http-over-capnp-old-test.c++
+++ b/c++/src/capnp/compat/http-over-capnp-old-test.cpp
@@ -1,2 +1,2 @@
 #define TEST_PEER_OPTIMIZATION_LEVEL HttpOverCapnpFactory::LEVEL_1
-#include "http-over-capnp-test.c++"
+#include "http-over-capnp-test.cpp"
diff --git a/c++/src/capnp/compat/http-over-capnp-perf-test.c++ b/c++/src/capnp/compat/http-over-capnp-perf-test.cpp
similarity index 100%
rename from c++/src/capnp/compat/http-over-capnp-perf-test.c++
rename to c++/src/capnp/compat/http-over-capnp-perf-test.cpp
diff --git a/c++/src/capnp/compat/http-over-capnp-test.c++ b/c++/src/capnp/compat/http-over-capnp-test.cpp
similarity index 100%
rename from c++/src/capnp/compat/http-over-capnp-test.c++
rename to c++/src/capnp/compat/http-over-capnp-test.cpp
diff --git a/c++/src/capnp/compat/http-over-capnp.c++ b/c++/src/capnp/compat/http-over-capnp.cpp
similarity index 100%
rename from c++/src/capnp/compat/http-over-capnp.c++
rename to c++/src/capnp/compat/http-over-capnp.cpp
diff --git a/c++/src/capnp/compat/json-rpc-test.c++ b/c++/src/capnp/compat/json-rpc-test.cpp
similarity index 100%
rename from c++/src/capnp/compat/json-rpc-test.c++
rename to c++/src/capnp/compat/json-rpc-test.cpp
diff --git a/c++/src/capnp/compat/json-rpc.c++ b/c++/src/capnp/compat/json-rpc.cpp
similarity index 100%
rename from c++/src/capnp/compat/json-rpc.c++
rename to c++/src/capnp/compat/json-rpc.cpp
diff --git a/c++/src/capnp/compat/json-test.c++ b/c++/src/capnp/compat/json-test.cpp
similarity index 100%
rename from c++/src/capnp/compat/json-test.c++
rename to c++/src/capnp/compat/json-test.cpp
diff --git a/c++/src/capnp/compat/json.capnp.c++ b/c++/src/capnp/compat/json.capnp.cpp
similarity index 100%
rename from c++/src/capnp/compat/json.capnp.c++
rename to c++/src/capnp/compat/json.capnp.cpp
diff --git a/c++/src/capnp/compat/json.c++ b/c++/src/capnp/compat/json.cpp
similarity index 100%
rename from c++/src/capnp/compat/json.c++
rename to c++/src/capnp/compat/json.cpp
diff --git a/c++/src/capnp/compat/websocket-rpc-test.c++ b/c++/src/capnp/compat/websocket-rpc-test.cpp
similarity index 100%
rename from c++/src/capnp/compat/websocket-rpc-test.c++
rename to c++/src/capnp/compat/websocket-rpc-test.cpp
diff --git a/c++/src/capnp/compat/websocket-rpc.c++ b/c++/src/capnp/compat/websocket-rpc.cpp
similarity index 100%
rename from c++/src/capnp/compat/websocket-rpc.c++
rename to c++/src/capnp/compat/websocket-rpc.cpp
diff --git a/c++/src/capnp/compiler/capnp.c++ b/c++/src/capnp/compiler/capnp.cpp
similarity index 100%
rename from c++/src/capnp/compiler/capnp.c++
rename to c++/src/capnp/compiler/capnp.cpp
diff --git a/c++/src/capnp/compiler/capnpc-c++.c++ b/c++/src/capnp/compiler/capnpc-c++.cpp
similarity index 99%
rename from c++/src/capnp/compiler/capnpc-c++.c++
rename to c++/src/capnp/compiler/capnpc-c++.cpp
index a60d4770..1e3ccab7 100644
--- a/c++/src/capnp/compiler/capnpc-c++.c++
+++ b/c++/src/capnp/compiler/capnpc-c++.cpp
@@ -3187,7 +3187,7 @@ private:
       auto fileText = makeFileText(schema, requestedFile);
 
       writeFile(kj::str(schema.getProto().getDisplayName(), ".h"), fileText.header);
-      writeFile(kj::str(schema.getProto().getDisplayName(), ".c++"), fileText.source);
+      writeFile(kj::str(schema.getProto().getDisplayName(), ".cpp"), fileText.source);
     }
 
     return true;
diff --git a/c++/src/capnp/compiler/capnpc-capnp.c++ b/c++/src/capnp/compiler/capnpc-capnp.cpp
similarity index 100%
rename from c++/src/capnp/compiler/capnpc-capnp.c++
rename to c++/src/capnp/compiler/capnpc-capnp.cpp
diff --git a/c++/src/capnp/compiler/compiler.c++ b/c++/src/capnp/compiler/compiler.cpp
similarity index 100%
rename from c++/src/capnp/compiler/compiler.c++
rename to c++/src/capnp/compiler/compiler.cpp
diff --git a/c++/src/capnp/compiler/error-reporter.c++ b/c++/src/capnp/compiler/error-reporter.cpp
similarity index 100%
rename from c++/src/capnp/compiler/error-reporter.c++
rename to c++/src/capnp/compiler/error-reporter.cpp
diff --git a/c++/src/capnp/compiler/evolution-test.c++ b/c++/src/capnp/compiler/evolution-test.cpp
similarity index 100%
rename from c++/src/capnp/compiler/evolution-test.c++
rename to c++/src/capnp/compiler/evolution-test.cpp
diff --git a/c++/src/capnp/compiler/generics.c++ b/c++/src/capnp/compiler/generics.cpp
similarity index 100%
rename from c++/src/capnp/compiler/generics.c++
rename to c++/src/capnp/compiler/generics.cpp
diff --git a/c++/src/capnp/compiler/grammar.capnp.c++ b/c++/src/capnp/compiler/grammar.capnp.cpp
similarity index 100%
rename from c++/src/capnp/compiler/grammar.capnp.c++
rename to c++/src/capnp/compiler/grammar.capnp.cpp
diff --git a/c++/src/capnp/compiler/lexer-test.c++ b/c++/src/capnp/compiler/lexer-test.cpp
similarity index 100%
rename from c++/src/capnp/compiler/lexer-test.c++
rename to c++/src/capnp/compiler/lexer-test.cpp
diff --git a/c++/src/capnp/compiler/lexer.capnp.c++ b/c++/src/capnp/compiler/lexer.capnp.cpp
similarity index 100%
rename from c++/src/capnp/compiler/lexer.capnp.c++
rename to c++/src/capnp/compiler/lexer.capnp.cpp
diff --git a/c++/src/capnp/compiler/lexer.c++ b/c++/src/capnp/compiler/lexer.cpp
similarity index 100%
rename from c++/src/capnp/compiler/lexer.c++
rename to c++/src/capnp/compiler/lexer.cpp
diff --git a/c++/src/capnp/compiler/module-loader.c++ b/c++/src/capnp/compiler/module-loader.cpp
similarity index 100%
rename from c++/src/capnp/compiler/module-loader.c++
rename to c++/src/capnp/compiler/module-loader.cpp
diff --git a/c++/src/capnp/compiler/node-translator.c++ b/c++/src/capnp/compiler/node-translator.cpp
similarity index 100%
rename from c++/src/capnp/compiler/node-translator.c++
rename to c++/src/capnp/compiler/node-translator.cpp
diff --git a/c++/src/capnp/compiler/parser.c++ b/c++/src/capnp/compiler/parser.cpp
similarity index 100%
rename from c++/src/capnp/compiler/parser.c++
rename to c++/src/capnp/compiler/parser.cpp
diff --git a/c++/src/capnp/compiler/type-id-test.c++ b/c++/src/capnp/compiler/type-id-test.cpp
similarity index 100%
rename from c++/src/capnp/compiler/type-id-test.c++
rename to c++/src/capnp/compiler/type-id-test.cpp
diff --git a/c++/src/capnp/compiler/type-id.c++ b/c++/src/capnp/compiler/type-id.cpp
similarity index 100%
rename from c++/src/capnp/compiler/type-id.c++
rename to c++/src/capnp/compiler/type-id.cpp
diff --git a/c++/src/capnp/dynamic-capability.c++ b/c++/src/capnp/dynamic-capability.cpp
similarity index 100%
rename from c++/src/capnp/dynamic-capability.c++
rename to c++/src/capnp/dynamic-capability.cpp
diff --git a/c++/src/capnp/dynamic-test.c++ b/c++/src/capnp/dynamic-test.cpp
similarity index 100%
rename from c++/src/capnp/dynamic-test.c++
rename to c++/src/capnp/dynamic-test.cpp
diff --git a/c++/src/capnp/dynamic.c++ b/c++/src/capnp/dynamic.cpp
similarity index 100%
rename from c++/src/capnp/dynamic.c++
rename to c++/src/capnp/dynamic.cpp
diff --git a/c++/src/capnp/encoding-test.c++ b/c++/src/capnp/encoding-test.cpp
similarity index 100%
rename from c++/src/capnp/encoding-test.c++
rename to c++/src/capnp/encoding-test.cpp
diff --git a/c++/src/capnp/endian-fallback-test.c++ b/c++/src/capnp/endian-fallback-test.cpp
similarity index 97%
rename from c++/src/capnp/endian-fallback-test.c++
rename to c++/src/capnp/endian-fallback-test.cpp
index 4d9c1b30..7c8329a6 100644
--- a/c++/src/capnp/endian-fallback-test.c++
+++ b/c++/src/capnp/endian-fallback-test.cpp
@@ -21,4 +21,4 @@
 
 // Test that the shift-based implementation of WireValue works.
 #define CAPNP_DISABLE_ENDIAN_DETECTION 1
-#include "endian-test.c++"
+#include "endian-test.cpp"
diff --git a/c++/src/capnp/endian-reverse-test.c++ b/c++/src/capnp/endian-reverse-test.cpp
similarity index 100%
rename from c++/src/capnp/endian-reverse-test.c++
rename to c++/src/capnp/endian-reverse-test.cpp
diff --git a/c++/src/capnp/endian-test.c++ b/c++/src/capnp/endian-test.cpp
similarity index 100%
rename from c++/src/capnp/endian-test.c++
rename to c++/src/capnp/endian-test.cpp
diff --git a/c++/src/capnp/ez-rpc-test.c++ b/c++/src/capnp/ez-rpc-test.cpp
similarity index 100%
rename from c++/src/capnp/ez-rpc-test.c++
rename to c++/src/capnp/ez-rpc-test.cpp
diff --git a/c++/src/capnp/ez-rpc.c++ b/c++/src/capnp/ez-rpc.cpp
similarity index 100%
rename from c++/src/capnp/ez-rpc.c++
rename to c++/src/capnp/ez-rpc.cpp
diff --git a/c++/src/capnp/fuzz-test.c++ b/c++/src/capnp/fuzz-test.cpp
similarity index 100%
rename from c++/src/capnp/fuzz-test.c++
rename to c++/src/capnp/fuzz-test.cpp
diff --git a/c++/src/capnp/generated-header-support.h b/c++/src/capnp/generated-header-support.h
index 3c5b6566..15309788 100644
--- a/c++/src/capnp/generated-header-support.h
+++ b/c++/src/capnp/generated-header-support.h
@@ -191,7 +191,7 @@ constexpr RawBrandedSchema::Binding brandBindingFor() {
 kj::StringTree structString(StructReader reader, const RawBrandedSchema& schema);
 kj::String enumString(uint16_t value, const RawBrandedSchema& schema);
 // Declared here so that we can declare inline stringify methods on generated types.
-// Defined in stringify.c++, which depends on dynamic.c++, which is allowed not to be linked in.
+// Defined in stringify.cpp, which depends on dynamic.cpp, which is allowed not to be linked in.
 
 template <typename T>
 inline kj::StringTree structString(StructReader reader) {
diff --git a/c++/src/capnp/layout-test.c++ b/c++/src/capnp/layout-test.cpp
similarity index 100%
rename from c++/src/capnp/layout-test.c++
rename to c++/src/capnp/layout-test.cpp
diff --git a/c++/src/capnp/layout.c++ b/c++/src/capnp/layout.cpp
similarity index 99%
rename from c++/src/capnp/layout.c++
rename to c++/src/capnp/layout.cpp
index e2fa84df..f948d8af 100644
--- a/c++/src/capnp/layout.c++
+++ b/c++/src/capnp/layout.cpp
@@ -39,7 +39,7 @@ static BrokenCapFactory* globalBrokenCapFactory = nullptr;
 // but we can't have a link-time dependency on libcapnp-rpc.
 
 void setGlobalBrokenCapFactoryForLayoutCpp(BrokenCapFactory& factory) {
-  // Called from capability.c++ when the capability API is used, to make sure that layout.c++
+  // Called from capability.cpp when the capability API is used, to make sure that layout.cpp
   // is ready for it.  May be called multiple times but always with the same value.
 #if __GNUC__ || defined(__clang__)
   __atomic_store_n(&globalBrokenCapFactory, &factory, __ATOMIC_RELAXED);
@@ -64,7 +64,7 @@ static BrokenCapFactory* readGlobalBrokenCapFactoryForLayoutCpp() {
 
 const uint ClientHook::NULL_CAPABILITY_BRAND = 0;
 const uint ClientHook::BROKEN_CAPABILITY_BRAND = 0;
-// Defined here rather than capability.c++ so that we can safely call isNull() in this file.
+// Defined here rather than capability.cpp so that we can safely call isNull() in this file.
 
 namespace _ {  // private
 
diff --git a/c++/src/capnp/layout.h b/c++/src/capnp/layout.h
index 7a27f68a..7e7f9e0a 100644
--- a/c++/src/capnp/layout.h
+++ b/c++/src/capnp/layout.h
@@ -920,7 +920,7 @@ private:
                 "This struct assumes a pointer is one word.");
   word tag;
   // Contains an encoded WirePointer representing this object.  WirePointer is defined in
-  // layout.c++, but fits in a word.
+  // layout.cpp, but fits in a word.
   //
   // This may be a FAR pointer.  Even in that case, `location` points to the eventual destination
   // of that far pointer.  The reason we keep the far pointer around rather than just making `tag`
@@ -1066,7 +1066,7 @@ inline void StructBuilder::setDataField(StructDataOffset offset,
 }
 
 inline PointerBuilder StructBuilder::getPointerField(StructPointerOffset ptrIndex) {
-  // Hacky because WirePointer is defined in the .c++ file (so is incomplete here).
+  // Hacky because WirePointer is defined in the .cpp file (so is incomplete here).
   return PointerBuilder(segment, capTable, reinterpret_cast<WirePointer*>(
       reinterpret_cast<word*>(pointers) + ptrIndex * WORDS_PER_POINTER));
 }
@@ -1127,7 +1127,7 @@ T StructReader::getDataField(StructDataOffset offset, Mask<T> mask) const {
 
 inline PointerReader StructReader::getPointerField(StructPointerOffset ptrIndex) const {
   if (ptrIndex < pointerCount) {
-    // Hacky because WirePointer is defined in the .c++ file (so is incomplete here).
+    // Hacky because WirePointer is defined in the .cpp file (so is incomplete here).
     return PointerReader(segment, capTable, reinterpret_cast<const WirePointer*>(
         reinterpret_cast<const word*>(pointers) + ptrIndex * WORDS_PER_POINTER), nestingLimit);
   } else{
diff --git a/c++/src/capnp/list.c++ b/c++/src/capnp/list.cpp
similarity index 100%
rename from c++/src/capnp/list.c++
rename to c++/src/capnp/list.cpp
diff --git a/c++/src/capnp/llvm-fuzzer-testcase.c++ b/c++/src/capnp/llvm-fuzzer-testcase.cpp
similarity index 100%
rename from c++/src/capnp/llvm-fuzzer-testcase.c++
rename to c++/src/capnp/llvm-fuzzer-testcase.cpp
diff --git a/c++/src/capnp/membrane-test.c++ b/c++/src/capnp/membrane-test.cpp
similarity index 100%
rename from c++/src/capnp/membrane-test.c++
rename to c++/src/capnp/membrane-test.cpp
diff --git a/c++/src/capnp/membrane.c++ b/c++/src/capnp/membrane.cpp
similarity index 100%
rename from c++/src/capnp/membrane.c++
rename to c++/src/capnp/membrane.cpp
diff --git a/c++/src/capnp/message-test.c++ b/c++/src/capnp/message-test.cpp
similarity index 100%
rename from c++/src/capnp/message-test.c++
rename to c++/src/capnp/message-test.cpp
diff --git a/c++/src/capnp/message.c++ b/c++/src/capnp/message.cpp
similarity index 100%
rename from c++/src/capnp/message.c++
rename to c++/src/capnp/message.cpp
diff --git a/c++/src/capnp/orphan-test.c++ b/c++/src/capnp/orphan-test.cpp
similarity index 100%
rename from c++/src/capnp/orphan-test.c++
rename to c++/src/capnp/orphan-test.cpp
diff --git a/c++/src/capnp/persistent.capnp.c++ b/c++/src/capnp/persistent.capnp.cpp
similarity index 100%
rename from c++/src/capnp/persistent.capnp.c++
rename to c++/src/capnp/persistent.capnp.cpp
diff --git a/c++/src/capnp/reconnect-test.c++ b/c++/src/capnp/reconnect-test.cpp
similarity index 100%
rename from c++/src/capnp/reconnect-test.c++
rename to c++/src/capnp/reconnect-test.cpp
diff --git a/c++/src/capnp/reconnect.c++ b/c++/src/capnp/reconnect.cpp
similarity index 100%
rename from c++/src/capnp/reconnect.c++
rename to c++/src/capnp/reconnect.cpp
diff --git a/c++/src/capnp/rpc-test.c++ b/c++/src/capnp/rpc-test.cpp
similarity index 100%
rename from c++/src/capnp/rpc-test.c++
rename to c++/src/capnp/rpc-test.cpp
diff --git a/c++/src/capnp/rpc-twoparty-test.c++ b/c++/src/capnp/rpc-twoparty-test.cpp
similarity index 99%
rename from c++/src/capnp/rpc-twoparty-test.c++
rename to c++/src/capnp/rpc-twoparty-test.cpp
index 5bf2215d..193d962a 100644
--- a/c++/src/capnp/rpc-twoparty-test.c++
+++ b/c++/src/capnp/rpc-twoparty-test.cpp
@@ -1137,7 +1137,7 @@ RemotePromise<test::TestCallOrder::GetCallSequenceResults> getCallSequence(
 }
 
 KJ_TEST("Two-hop embargo") {
-  // Copied from `TEST(Rpc, Embargo)` in `rpc-test.c++`, adapted to involve a two-hop path through
+  // Copied from `TEST(Rpc, Embargo)` in `rpc-test.cpp`, adapted to involve a two-hop path through
   // a proxy. This tests what happens when disembargoes on multiple hops are happening in parallel.
 
   kj::EventLoop loop;
diff --git a/c++/src/capnp/rpc-twoparty.capnp.c++ b/c++/src/capnp/rpc-twoparty.capnp.cpp
similarity index 100%
rename from c++/src/capnp/rpc-twoparty.capnp.c++
rename to c++/src/capnp/rpc-twoparty.capnp.cpp
diff --git a/c++/src/capnp/rpc-twoparty.c++ b/c++/src/capnp/rpc-twoparty.cpp
similarity index 100%
rename from c++/src/capnp/rpc-twoparty.c++
rename to c++/src/capnp/rpc-twoparty.cpp
diff --git a/c++/src/capnp/rpc.capnp b/c++/src/capnp/rpc.capnp
index 0e718d5b..b7ee4d67 100644
--- a/c++/src/capnp/rpc.capnp
+++ b/c++/src/capnp/rpc.capnp
@@ -608,7 +608,7 @@ struct Finish {
   # to implement the behavior. The purpose of this flag is to let newer versions know when the
   # peer is an older version, so that it can attempt to work around the issue.
   #
-  # See also comments in handleFinish() in rpc.c++ for more details.
+  # See also comments in handleFinish() in rpc.cpp for more details.
 }
 
 # Level 1 message types ----------------------------------------------
diff --git a/c++/src/capnp/rpc.capnp.c++ b/c++/src/capnp/rpc.capnp.cpp
similarity index 100%
rename from c++/src/capnp/rpc.capnp.c++
rename to c++/src/capnp/rpc.capnp.cpp
diff --git a/c++/src/capnp/rpc.c++ b/c++/src/capnp/rpc.cpp
similarity index 99%
rename from c++/src/capnp/rpc.c++
rename to c++/src/capnp/rpc.cpp
index d66d1a22..6a140581 100644
--- a/c++/src/capnp/rpc.c++
+++ b/c++/src/capnp/rpc.cpp
@@ -2139,7 +2139,7 @@ private:
     kj::OneOf<Waiting, Resolved, Broken> state;
 
     kj::HashMap<kj::Array<PipelineOp>, kj::Own<ClientHook>> clientMap;
-    // See QueuedPipeline::clientMap in capability.c++ for a discussion of why we must memoize
+    // See QueuedPipeline::clientMap in capability.cpp for a discussion of why we must memoize
     // the results of getPipelinedCap(). RpcPipeline has a similar problem when a capability we
     // return is later subject to an embargo. It's important that the embargo is correctly applied
     // across all calls to the same capability.
diff --git a/c++/src/capnp/schema-loader-test.c++ b/c++/src/capnp/schema-loader-test.cpp
similarity index 99%
rename from c++/src/capnp/schema-loader-test.c++
rename to c++/src/capnp/schema-loader-test.cpp
index c2b2651b..5e088739 100644
--- a/c++/src/capnp/schema-loader-test.c++
+++ b/c++/src/capnp/schema-loader-test.cpp
@@ -425,7 +425,7 @@ KJ_TEST("SchemaLoader placeholders are assumed to have caps") {
     KJ_EXPECT(!schemaB.asStruct().mayContainCapabilities());
   }
 
-  // NOTE: computeOptimizationHints() is also tested in `schema-test.c++` where we test that
+  // NOTE: computeOptimizationHints() is also tested in `schema-test.cpp` where we test that
   //   various compiled types have the correct hints, which relies on the code generator having
   //   computed the hints.
 }
diff --git a/c++/src/capnp/schema-loader.c++ b/c++/src/capnp/schema-loader.cpp
similarity index 100%
rename from c++/src/capnp/schema-loader.c++
rename to c++/src/capnp/schema-loader.cpp
diff --git a/c++/src/capnp/schema-parser-test.c++ b/c++/src/capnp/schema-parser-test.cpp
similarity index 100%
rename from c++/src/capnp/schema-parser-test.c++
rename to c++/src/capnp/schema-parser-test.cpp
diff --git a/c++/src/capnp/schema-parser.c++ b/c++/src/capnp/schema-parser.cpp
similarity index 100%
rename from c++/src/capnp/schema-parser.c++
rename to c++/src/capnp/schema-parser.cpp
diff --git a/c++/src/capnp/schema-test.c++ b/c++/src/capnp/schema-test.cpp
similarity index 100%
rename from c++/src/capnp/schema-test.c++
rename to c++/src/capnp/schema-test.cpp
diff --git a/c++/src/capnp/schema.capnp.c++ b/c++/src/capnp/schema.capnp.cpp
similarity index 100%
rename from c++/src/capnp/schema.capnp.c++
rename to c++/src/capnp/schema.capnp.cpp
diff --git a/c++/src/capnp/schema.c++ b/c++/src/capnp/schema.cpp
similarity index 100%
rename from c++/src/capnp/schema.c++
rename to c++/src/capnp/schema.cpp
diff --git a/c++/src/capnp/serialize-async-test.c++ b/c++/src/capnp/serialize-async-test.cpp
similarity index 100%
rename from c++/src/capnp/serialize-async-test.c++
rename to c++/src/capnp/serialize-async-test.cpp
diff --git a/c++/src/capnp/serialize-async.c++ b/c++/src/capnp/serialize-async.cpp
similarity index 100%
rename from c++/src/capnp/serialize-async.c++
rename to c++/src/capnp/serialize-async.cpp
diff --git a/c++/src/capnp/serialize-packed-test.c++ b/c++/src/capnp/serialize-packed-test.cpp
similarity index 100%
rename from c++/src/capnp/serialize-packed-test.c++
rename to c++/src/capnp/serialize-packed-test.cpp
diff --git a/c++/src/capnp/serialize-packed.c++ b/c++/src/capnp/serialize-packed.cpp
similarity index 100%
rename from c++/src/capnp/serialize-packed.c++
rename to c++/src/capnp/serialize-packed.cpp
diff --git a/c++/src/capnp/serialize-test.c++ b/c++/src/capnp/serialize-test.cpp
similarity index 100%
rename from c++/src/capnp/serialize-test.c++
rename to c++/src/capnp/serialize-test.cpp
diff --git a/c++/src/capnp/serialize-text-test.c++ b/c++/src/capnp/serialize-text-test.cpp
similarity index 100%
rename from c++/src/capnp/serialize-text-test.c++
rename to c++/src/capnp/serialize-text-test.cpp
diff --git a/c++/src/capnp/serialize-text.c++ b/c++/src/capnp/serialize-text.cpp
similarity index 100%
rename from c++/src/capnp/serialize-text.c++
rename to c++/src/capnp/serialize-text.cpp
diff --git a/c++/src/capnp/serialize.c++ b/c++/src/capnp/serialize.cpp
similarity index 100%
rename from c++/src/capnp/serialize.c++
rename to c++/src/capnp/serialize.cpp
diff --git a/c++/src/capnp/stream.capnp.c++ b/c++/src/capnp/stream.capnp.cpp
similarity index 100%
rename from c++/src/capnp/stream.capnp.c++
rename to c++/src/capnp/stream.capnp.cpp
diff --git a/c++/src/capnp/stringify-test.c++ b/c++/src/capnp/stringify-test.cpp
similarity index 100%
rename from c++/src/capnp/stringify-test.c++
rename to c++/src/capnp/stringify-test.cpp
diff --git a/c++/src/capnp/stringify.c++ b/c++/src/capnp/stringify.cpp
similarity index 100%
rename from c++/src/capnp/stringify.c++
rename to c++/src/capnp/stringify.cpp
diff --git a/c++/src/capnp/test-util.c++ b/c++/src/capnp/test-util.cpp
similarity index 100%
rename from c++/src/capnp/test-util.c++
rename to c++/src/capnp/test-util.cpp
diff --git a/c++/src/kj/BUILD.bazel b/c++/src/kj/BUILD.bazel
index 6fd960ff..4f1ab165 100644
--- a/c++/src/kj/BUILD.bazel
+++ b/c++/src/kj/BUILD.bazel
@@ -5,32 +5,32 @@ kj_configure()
 cc_library(
     name = "kj",
     srcs = [
-        "arena.c++",
-        "array.c++",
-        "cidr.c++",
-        "common.c++",
-        "debug.c++",
-        "encoding.c++",
-        "exception.c++",
-        "filesystem.c++",
-        "filesystem-disk-unix.c++",
-        "filesystem-disk-win32.c++",
-        "hash.c++",
-        "io.c++",
-        "list.c++",
-        "main.c++",
-        "memory.c++",
-        "mutex.c++",
-        "parse/char.c++",
-        "refcount.c++",
-        "source-location.c++",
-        "string.c++",
-        "string-tree.c++",
-        "table.c++",
-        "test-helpers.c++",
-        "thread.c++",
-        "time.c++",
-        "units.c++",
+        "arena.cpp",
+        "array.cpp",
+        "cidr.cpp",
+        "common.cpp",
+        "debug.cpp",
+        "encoding.cpp",
+        "exception.cpp",
+        "filesystem.cpp",
+        "filesystem-disk-unix.cpp",
+        "filesystem-disk-win32.cpp",
+        "hash.cpp",
+        "io.cpp",
+        "list.cpp",
+        "main.cpp",
+        "memory.cpp",
+        "mutex.cpp",
+        "parse/char.cpp",
+        "refcount.cpp",
+        "source-location.cpp",
+        "string.cpp",
+        "string-tree.cpp",
+        "table.cpp",
+        "test-helpers.cpp",
+        "thread.cpp",
+        "time.cpp",
+        "units.cpp",
     ],
     hdrs = [
         "arena.h",
@@ -85,13 +85,13 @@ cc_library(
 cc_library(
     name = "kj-async",
     srcs = [
-        "async.c++",
-        "async-io.c++",
-        "async-io-unix.c++",
-        "async-io-win32.c++",
-        "async-unix.c++",
-        "async-win32.c++",
-        "timer.c++",
+        "async.cpp",
+        "async-io.cpp",
+        "async-io-unix.cpp",
+        "async-io-win32.cpp",
+        "async-unix.cpp",
+        "async-win32.cpp",
+        "timer.cpp",
     ],
     hdrs = [
         "async.h",
@@ -119,7 +119,7 @@ cc_library(
 cc_library(
     name = "kj-test",
     srcs = [
-        "test.c++",
+        "test.cpp",
     ],
     include_prefix = "kj",
     visibility = ["//visibility:public"],
@@ -130,7 +130,7 @@ cc_library(
 )
 
 [cc_test(
-    name = f.removesuffix(".c++"),
+    name = f.removesuffix(".cpp"),
     srcs = [f],
     deps = [
         ":kj",
@@ -138,42 +138,42 @@ cc_library(
         ":kj-test",
     ],
 ) for f in [
-    "arena-test.c++",
-    "array-test.c++",
-    "async-io-test.c++",
-    "async-queue-test.c++",
-    "async-test.c++",
-    "async-xthread-test.c++",
-    "common-test.c++",
-    "debug-test.c++",
-    "encoding-test.c++",
-    "exception-test.c++",
-    "filesystem-disk-test.c++",
-    "filesystem-test.c++",
-    "function-test.c++",
-    "io-test.c++",
-    "list-test.c++",
-    "map-test.c++",
-    "memory-test.c++",
-    "mutex-test.c++",
-    "one-of-test.c++",
-    "parse/char-test.c++",
-    "refcount-test.c++",
-    "std/iostream-test.c++",
-    "string-test.c++",
-    "string-tree-test.c++",
-    "table-test.c++",
-    "test-test.c++",
-    "threadlocal-test.c++",
-    "thread-test.c++",
-    "time-test.c++",
-    "tuple-test.c++",
-    "units-test.c++",
+    "arena-test.cpp",
+    "array-test.cpp",
+    "async-io-test.cpp",
+    "async-queue-test.cpp",
+    "async-test.cpp",
+    "async-xthread-test.cpp",
+    "common-test.cpp",
+    "debug-test.cpp",
+    "encoding-test.cpp",
+    "exception-test.cpp",
+    "filesystem-disk-test.cpp",
+    "filesystem-test.cpp",
+    "function-test.cpp",
+    "io-test.cpp",
+    "list-test.cpp",
+    "map-test.cpp",
+    "memory-test.cpp",
+    "mutex-test.cpp",
+    "one-of-test.cpp",
+    "parse/char-test.cpp",
+    "refcount-test.cpp",
+    "std/iostream-test.cpp",
+    "string-test.cpp",
+    "string-tree-test.cpp",
+    "table-test.cpp",
+    "test-test.cpp",
+    "threadlocal-test.cpp",
+    "thread-test.cpp",
+    "time-test.cpp",
+    "tuple-test.cpp",
+    "units-test.cpp",
 ]]
 
 cc_test(
     name = "async-coroutine-test",
-    srcs = ["async-coroutine-test.c++"],
+    srcs = ["async-coroutine-test.cpp"],
     target_compatible_with = select({
         ":use_coroutines": [],
         "//conditions:default": ["@platforms//:incompatible"],
@@ -187,14 +187,14 @@ cc_test(
 cc_library(
     name = "filesystem-disk-test-base",
     hdrs = [
-        "filesystem-disk-test.c++",
-        "filesystem-disk-unix.c++",
+        "filesystem-disk-test.cpp",
+        "filesystem-disk-unix.cpp",
     ],
 )
 
 cc_test(
     name = "filesystem-disk-generic-test",
-    srcs = ["filesystem-disk-generic-test.c++"],
+    srcs = ["filesystem-disk-generic-test.cpp"],
     deps = [
         ":filesystem-disk-test-base",
         ":kj-test",
@@ -206,7 +206,7 @@ cc_test(
 
 cc_test(
     name = "filesystem-disk-old-kernel-test",
-    srcs = ["filesystem-disk-old-kernel-test.c++"],
+    srcs = ["filesystem-disk-old-kernel-test.cpp"],
     deps = [
         ":filesystem-disk-test-base",
         ":kj-test",
@@ -219,8 +219,8 @@ cc_test(
 cc_test(
     name = "async-os-test",
     srcs = select({
-        "@platforms//os:windows": ["async-win32-test.c++"],
-        "//conditions:default": ["async-unix-test.c++"],
+        "@platforms//os:windows": ["async-win32-test.cpp"],
+        "//conditions:default": ["async-unix-test.cpp"],
     }),
     deps = [
         ":kj",
@@ -231,14 +231,14 @@ cc_test(
 
 cc_library(
     name = "async-os-xthread-test-base",
-    hdrs = ["async-xthread-test.c++"],
+    hdrs = ["async-xthread-test.cpp"],
 )
 
 cc_test(
     name = "async-os-xthread-test",
     srcs = select({
-        "@platforms//os:windows": ["async-win32-xthread-test.c++"],
-        "//conditions:default": ["async-unix-xthread-test.c++"],
+        "@platforms//os:windows": ["async-win32-xthread-test.cpp"],
+        "//conditions:default": ["async-unix-xthread-test.cpp"],
     }),
     deps = [
         ":async-os-xthread-test-base",
@@ -249,7 +249,7 @@ cc_test(
 
 cc_test(
     name = "exception-override-symbolizer-test",
-    srcs = ["exception-override-symbolizer-test.c++"],
+    srcs = ["exception-override-symbolizer-test.cpp"],
     deps = [
         ":kj",
         ":kj-test",
diff --git a/c++/src/kj/CMakeLists.txt b/c++/src/kj/CMakeLists.txt
index 980c53e3..727015f6 100644
--- a/c++/src/kj/CMakeLists.txt
+++ b/c++/src/kj/CMakeLists.txt
@@ -2,34 +2,34 @@
 # kj ===========================================================================
 
 set(kj_sources_lite
-  array.c++
-  cidr.c++
-  list.c++
-  common.c++
-  debug.c++
-  exception.c++
-  io.c++
-  memory.c++
-  mutex.c++
-  string.c++
-  source-location.c++
-  hash.c++
-  table.c++
-  thread.c++
-  main.c++
-  arena.c++
-  test-helpers.c++
-  units.c++
-  encoding.c++
+  array.cpp
+  cidr.cpp
+  list.cpp
+  common.cpp
+  debug.cpp
+  exception.cpp
+  io.cpp
+  memory.cpp
+  mutex.cpp
+  string.cpp
+  source-location.cpp
+  hash.cpp
+  table.cpp
+  thread.cpp
+  main.cpp
+  arena.cpp
+  test-helpers.cpp
+  units.cpp
+  encoding.cpp
 )
 set(kj_sources_heavy
-  refcount.c++
-  string-tree.c++
-  time.c++
-  filesystem.c++
-  filesystem-disk-unix.c++
-  filesystem-disk-win32.c++
-  parse/char.c++
+  refcount.cpp
+  string-tree.cpp
+  time.cpp
+  filesystem.cpp
+  filesystem-disk-unix.cpp
+  filesystem-disk-win32.cpp
+  parse/char.cpp
 )
 if(NOT CAPNP_LITE)
   set(kj_sources ${kj_sources_lite} ${kj_sources_heavy})
@@ -100,7 +100,7 @@ install(FILES ${kj-parse_headers} DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/kj/pa
 install(FILES ${kj-std_headers} DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/kj/std")
 
 set(kj-test_sources
-  test.c++
+  test.cpp
 )
 set(kj-test_headers
   test.h
@@ -118,13 +118,13 @@ install(FILES ${kj-test_headers} DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/kj")
 install(FILES ${kj-test-compat_headers} DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/kj/compat")
 
 set(kj-async_sources
-  async.c++
-  async-unix.c++
-  async-win32.c++
-  async-io-win32.c++
-  async-io.c++
-  async-io-unix.c++
-  timer.c++
+  async.cpp
+  async-unix.cpp
+  async-win32.cpp
+  async-io-win32.cpp
+  async-io.cpp
+  async-io-unix.cpp
+  timer.cpp
 )
 set(kj-async_headers
   async-prelude.h
@@ -165,8 +165,8 @@ endif()
 # kj-http ======================================================================
 
 set(kj-http_sources
-  compat/url.c++
-  compat/http.c++
+  compat/url.cpp
+  compat/http.cpp
 )
 set(kj-http_headers
   compat/url.h
@@ -190,8 +190,8 @@ endif()
 # kj-tls ======================================================================
 if(WITH_OPENSSL)
   set(kj-tls_sources
-    compat/readiness-io.c++
-    compat/tls.c++
+    compat/readiness-io.cpp
+    compat/tls.cpp
   )
   set(kj-tls_headers
     compat/readiness-io.h
@@ -216,7 +216,7 @@ endif()
 
 if(WITH_ZLIB)
   set(kj-gzip_sources
-    compat/gzip.c++
+    compat/gzip.cpp
   )
   set(kj-gzip_headers
     compat/gzip.h
@@ -239,23 +239,23 @@ endif()
 
 if(BUILD_TESTING)
   add_executable(kj-tests
-    common-test.c++
-    memory-test.c++
-    array-test.c++
-    list-test.c++
-    string-test.c++
-    table-test.c++
-    map-test.c++
-    exception-test.c++
+    common-test.cpp
+    memory-test.cpp
+    array-test.cpp
+    list-test.cpp
+    string-test.cpp
+    table-test.cpp
+    map-test.cpp
+    exception-test.cpp
     # this test overrides symbolizer and has to be linked separately
-    # exception-override-symbolizer-test.c++
-    debug-test.c++
-    io-test.c++
-    mutex-test.c++
-    time-test.c++
-    threadlocal-test.c++
-    test-test.c++
-    std/iostream-test.c++
+    # exception-override-symbolizer-test.cpp
+    debug-test.cpp
+    io-test.cpp
+    mutex-test.cpp
+    time-test.cpp
+    threadlocal-test.cpp
+    test-test.cpp
+    std/iostream-test.cpp
   )
   # TODO: Link with librt on Solaris for sched_yield
   target_link_libraries(kj-tests kj-test kj)
@@ -264,47 +264,47 @@ if(BUILD_TESTING)
 
   if(NOT CAPNP_LITE)
     add_executable(kj-heavy-tests
-      async-test.c++
-      async-xthread-test.c++
-      async-coroutine-test.c++
-      async-unix-test.c++
-      async-unix-xthread-test.c++
-      async-win32-test.c++
-      async-win32-xthread-test.c++
-      async-io-test.c++
-      async-queue-test.c++
-      refcount-test.c++
-      string-tree-test.c++
-      encoding-test.c++
-      arena-test.c++
-      units-test.c++
-      tuple-test.c++
-      one-of-test.c++
-      function-test.c++
-      filesystem-test.c++
-      filesystem-disk-test.c++
-      parse/common-test.c++
-      parse/char-test.c++
-      compat/url-test.c++
-      compat/http-test.c++
-      compat/gzip-test.c++
-      compat/tls-test.c++
+      async-test.cpp
+      async-xthread-test.cpp
+      async-coroutine-test.cpp
+      async-unix-test.cpp
+      async-unix-xthread-test.cpp
+      async-win32-test.cpp
+      async-win32-xthread-test.cpp
+      async-io-test.cpp
+      async-queue-test.cpp
+      refcount-test.cpp
+      string-tree-test.cpp
+      encoding-test.cpp
+      arena-test.cpp
+      units-test.cpp
+      tuple-test.cpp
+      one-of-test.cpp
+      function-test.cpp
+      filesystem-test.cpp
+      filesystem-disk-test.cpp
+      parse/common-test.cpp
+      parse/char-test.cpp
+      compat/url-test.cpp
+      compat/http-test.cpp
+      compat/gzip-test.cpp
+      compat/tls-test.cpp
     )
     target_link_libraries(kj-heavy-tests kj-http kj-async kj-test kj)
     if(WITH_OPENSSL)
       target_link_libraries(kj-heavy-tests kj-tls)
-      # tls-test.c++ needs to use OpenSSL directly.
+      # tls-test.cpp needs to use OpenSSL directly.
       target_link_libraries(kj-heavy-tests OpenSSL::SSL OpenSSL::Crypto)
       target_compile_definitions(kj-heavy-tests PRIVATE KJ_HAS_OPENSSL)
       set_property(
-        SOURCE compat/tls-test.c++
+        SOURCE compat/tls-test.cpp
         APPEND PROPERTY COMPILE_DEFINITIONS KJ_HAS_OPENSSL
       )
     endif()
     if(WITH_ZLIB)
       target_link_libraries(kj-heavy-tests kj-gzip)
       set_property(
-        SOURCE compat/gzip-test.c++
+        SOURCE compat/gzip-test.cpp
         APPEND PROPERTY COMPILE_DEFINITIONS KJ_HAS_ZLIB
       )
     endif()
diff --git a/c++/src/kj/arena-test.c++ b/c++/src/kj/arena-test.cpp
similarity index 100%
rename from c++/src/kj/arena-test.c++
rename to c++/src/kj/arena-test.cpp
diff --git a/c++/src/kj/arena.c++ b/c++/src/kj/arena.cpp
similarity index 100%
rename from c++/src/kj/arena.c++
rename to c++/src/kj/arena.cpp
diff --git a/c++/src/kj/array-test.c++ b/c++/src/kj/array-test.cpp
similarity index 100%
rename from c++/src/kj/array-test.c++
rename to c++/src/kj/array-test.cpp
diff --git a/c++/src/kj/array.c++ b/c++/src/kj/array.cpp
similarity index 100%
rename from c++/src/kj/array.c++
rename to c++/src/kj/array.cpp
diff --git a/c++/src/kj/async-coroutine-test.c++ b/c++/src/kj/async-coroutine-test.cpp
similarity index 99%
rename from c++/src/kj/async-coroutine-test.c++
rename to c++/src/kj/async-coroutine-test.cpp
index de767eca..6b42f277 100644
--- a/c++/src/kj/async-coroutine-test.c++
+++ b/c++/src/kj/async-coroutine-test.cpp
@@ -473,7 +473,7 @@ Promise<Own<AsyncIoStream>> httpClientConnect(AsyncIoContext& io) {
 }
 
 Promise<void> httpClient(Own<AsyncIoStream> connection) {
-  // Borrowed and rewritten from compat/http-test.c++.
+  // Borrowed and rewritten from compat/http-test.cpp.
 
   HttpHeaderTable table;
   auto client = newHttpClient(table, *connection);
diff --git a/c++/src/kj/async-inl.h b/c++/src/kj/async-inl.h
index fc8a9813..8b609615 100644
--- a/c++/src/kj/async-inl.h
+++ b/c++/src/kj/async-inl.h
@@ -22,7 +22,7 @@
 // This file contains extended inline implementation details that are required along with async.h.
 // We move this all into a separate file to make async.h more readable.
 //
-// Non-inline declarations here are defined in async.c++.
+// Non-inline declarations here are defined in async.cpp.
 
 #pragma once
 
diff --git a/c++/src/kj/async-io-test.c++ b/c++/src/kj/async-io-test.cpp
similarity index 99%
rename from c++/src/kj/async-io-test.c++
rename to c++/src/kj/async-io-test.cpp
index bef5634b..67a00872 100644
--- a/c++/src/kj/async-io-test.c++
+++ b/c++/src/kj/async-io-test.cpp
@@ -702,7 +702,7 @@ TEST(AsyncIo, ScmRightsTruncatedOdd) {
         "buggy and leaks file descriptors when an SCM_RIGHTS message is truncated. FreeBSD was "
         "known to do this until late 2018, while MacOS still has this bug as of this writing in "
         "2019. However, KJ works around the problem on those platforms. You need to enable the "
-        "same work-around for your OS -- search for 'SCM_RIGHTS' in src/kj/async-io-unix.c++.");
+        "same work-around for your OS -- search for 'SCM_RIGHTS' in src/kj/async-io-unix.cpp.");
   }
   KJ_ASSERT(n == 0);
 }
@@ -793,7 +793,7 @@ TEST(AsyncIo, ScmRightsTruncatedEven) {
         "buggy and leaks file descriptors when an SCM_RIGHTS message is truncated. FreeBSD was "
         "known to do this until late 2018, while MacOS still has this bug as of this writing in "
         "2019. However, KJ works around the problem on those platforms. You need to enable the "
-        "same work-around for your OS -- search for 'SCM_RIGHTS' in src/kj/async-io-unix.c++.");
+        "same work-around for your OS -- search for 'SCM_RIGHTS' in src/kj/async-io-unix.cpp.");
   }
   KJ_ASSERT(n == 0);
 }
diff --git a/c++/src/kj/async-io-unix.c++ b/c++/src/kj/async-io-unix.cpp
similarity index 99%
rename from c++/src/kj/async-io-unix.c++
rename to c++/src/kj/async-io-unix.cpp
index d897fad5..d4d9731d 100644
--- a/c++/src/kj/async-io-unix.c++
+++ b/c++/src/kj/async-io-unix.cpp
@@ -20,7 +20,7 @@
 // THE SOFTWARE.
 
 #if !_WIN32
-// For Win32 implementation, see async-io-win32.c++.
+// For Win32 implementation, see async-io-win32.cpp.
 
 #ifndef _GNU_SOURCE
 #define _GNU_SOURCE
diff --git a/c++/src/kj/async-io-win32.c++ b/c++/src/kj/async-io-win32.cpp
similarity index 99%
rename from c++/src/kj/async-io-win32.c++
rename to c++/src/kj/async-io-win32.cpp
index f7f51803..b9f2111c 100644
--- a/c++/src/kj/async-io-win32.c++
+++ b/c++/src/kj/async-io-win32.cpp
@@ -20,7 +20,7 @@
 // THE SOFTWARE.
 
 #if _WIN32
-// For Unix implementation, see async-io-unix.c++.
+// For Unix implementation, see async-io-unix.cpp.
 
 // Request Vista-level APIs.
 #include <kj/win32-api-version.h>
diff --git a/c++/src/kj/async-io.c++ b/c++/src/kj/async-io.cpp
similarity index 100%
rename from c++/src/kj/async-io.c++
rename to c++/src/kj/async-io.cpp
diff --git a/c++/src/kj/async-queue-test.c++ b/c++/src/kj/async-queue-test.cpp
similarity index 100%
rename from c++/src/kj/async-queue-test.c++
rename to c++/src/kj/async-queue-test.cpp
diff --git a/c++/src/kj/async-test.c++ b/c++/src/kj/async-test.cpp
similarity index 100%
rename from c++/src/kj/async-test.c++
rename to c++/src/kj/async-test.cpp
diff --git a/c++/src/kj/async-unix-test.c++ b/c++/src/kj/async-unix-test.cpp
similarity index 100%
rename from c++/src/kj/async-unix-test.c++
rename to c++/src/kj/async-unix-test.cpp
diff --git a/c++/src/kj/async-unix-xthread-test.c++ b/c++/src/kj/async-unix-xthread-test.cpp
similarity index 97%
rename from c++/src/kj/async-unix-xthread-test.c++
rename to c++/src/kj/async-unix-xthread-test.cpp
index e57a8d84..7f53e1d8 100644
--- a/c++/src/kj/async-unix-xthread-test.c++
+++ b/c++/src/kj/async-unix-xthread-test.cpp
@@ -27,6 +27,6 @@
   UnixEventPort port; \
   EventLoop loop(port); \
   WaitScope waitScope(loop)
-#include "async-xthread-test.c++"
+#include "async-xthread-test.cpp"
 
 #endif  // !_WIN32
diff --git a/c++/src/kj/async-unix.c++ b/c++/src/kj/async-unix.cpp
similarity index 99%
rename from c++/src/kj/async-unix.c++
rename to c++/src/kj/async-unix.cpp
index a8179ea5..a35eb2c2 100644
--- a/c++/src/kj/async-unix.c++
+++ b/c++/src/kj/async-unix.cpp
@@ -144,7 +144,7 @@ struct SignalCapture {
   // ... but we ONLY do that on Apple systems, because it turns out, ironically, on Android, this
   // hack breaks signal delivery. pthread_sigmask() vs. sigprocmask() is not the issue; we
   // apparently MUST let siglongjmp() itself deal with the signal mask, otherwise various tests in
-  // async-unix-test.c++ end up hanging (I haven't gotten to the bottom of why). Note that on stock
+  // async-unix-test.cpp end up hanging (I haven't gotten to the bottom of why). Note that on stock
   // Linux, _either_ strategy works fine; this appears to be a problem with Android's Bionic libc.
   // Since letting siglongjmp() do the work _seeems_ more "correct", we'll make it the default and
   // only do something different on Apple platforms.
diff --git a/c++/src/kj/async-win32-test.c++ b/c++/src/kj/async-win32-test.cpp
similarity index 100%
rename from c++/src/kj/async-win32-test.c++
rename to c++/src/kj/async-win32-test.cpp
diff --git a/c++/src/kj/async-win32-xthread-test.c++ b/c++/src/kj/async-win32-xthread-test.cpp
similarity index 97%
rename from c++/src/kj/async-win32-xthread-test.c++
rename to c++/src/kj/async-win32-xthread-test.cpp
index c93be7fe..356db8b9 100644
--- a/c++/src/kj/async-win32-xthread-test.c++
+++ b/c++/src/kj/async-win32-xthread-test.cpp
@@ -27,6 +27,6 @@
   Win32IocpEventPort port; \
   EventLoop loop(port); \
   WaitScope waitScope(loop)
-#include "async-xthread-test.c++"
+#include "async-xthread-test.cpp"
 
 #endif  // _WIN32
diff --git a/c++/src/kj/async-win32.c++ b/c++/src/kj/async-win32.cpp
similarity index 100%
rename from c++/src/kj/async-win32.c++
rename to c++/src/kj/async-win32.cpp
diff --git a/c++/src/kj/async-xthread-test.c++ b/c++/src/kj/async-xthread-test.cpp
similarity index 99%
rename from c++/src/kj/async-xthread-test.c++
rename to c++/src/kj/async-xthread-test.cpp
index b6bd237e..855380ae 100644
--- a/c++/src/kj/async-xthread-test.c++
+++ b/c++/src/kj/async-xthread-test.cpp
@@ -38,7 +38,7 @@ inline void delay() { Sleep(10); }
 inline void delay() { usleep(10000); }
 #endif
 
-// This file is #included from async-unix-xthread-test.c++ and async-win32-xthread-test.c++ after
+// This file is #included from async-unix-xthread-test.cpp and async-win32-xthread-test.cpp after
 // defining KJ_XTHREAD_TEST_SETUP_LOOP to set up a loop with the corresponding EventPort.
 #ifndef KJ_XTHREAD_TEST_SETUP_LOOP
 #define KJ_XTHREAD_TEST_SETUP_LOOP \
diff --git a/c++/src/kj/async.c++ b/c++/src/kj/async.cpp
similarity index 100%
rename from c++/src/kj/async.c++
rename to c++/src/kj/async.cpp
diff --git a/c++/src/kj/async.h b/c++/src/kj/async.h
index 564b5171..265d5946 100644
--- a/c++/src/kj/async.h
+++ b/c++/src/kj/async.h
@@ -470,7 +470,7 @@ ArrayPtr<void* const> getAsyncTrace(ArrayPtr<void*> space);
 kj::String getAsyncTrace();
 // If the event loop is currently running in this thread, get a trace back through the promise
 // chain leading to the currently-executing event. The format is the same as kj::getStackTrace()
-// from exception.c++.
+// from exception.cpp.
 
 template <typename Func>
 PromiseForResult<Func, void> retryOnDisconnect(Func&& func) KJ_WARN_UNUSED_RESULT;
@@ -957,8 +957,8 @@ public:
   AdapterImpl(kj::PromiseFulfiller<void>& fulfiller,
               Canceler& canceler, kj::Promise<void> inner);
   void cancel(kj::Exception&& e) override;
-  // These must be defined in async.c++ to prevent translation units compiled by MSVC from trying to
-  // link with symbols defined in async.c++ merely because they included async.h.
+  // These must be defined in async.cpp to prevent translation units compiled by MSVC from trying to
+  // link with symbols defined in async.cpp merely because they included async.h.
 
 private:
   kj::PromiseFulfiller<void>& fulfiller;
diff --git a/c++/src/kj/cidr.c++ b/c++/src/kj/cidr.cpp
similarity index 100%
rename from c++/src/kj/cidr.c++
rename to c++/src/kj/cidr.cpp
diff --git a/c++/src/kj/common-test.c++ b/c++/src/kj/common-test.cpp
similarity index 99%
rename from c++/src/kj/common-test.c++
rename to c++/src/kj/common-test.cpp
index 97856125..d0a00ada 100644
--- a/c++/src/kj/common-test.c++
+++ b/c++/src/kj/common-test.cpp
@@ -897,7 +897,7 @@ KJ_TEST("kj::defer()") {
 }
 
 KJ_TEST("kj::ArrayPtr startsWith / endsWith / findFirst / findLast") {
-  // Note: char-/byte- optimized versions are covered by string-test.c++.
+  // Note: char-/byte- optimized versions are covered by string-test.cpp.
 
   int rawArray[] = {12, 34, 56, 34, 12};
   ArrayPtr<int> arr(rawArray);
diff --git a/c++/src/kj/common.c++ b/c++/src/kj/common.cpp
similarity index 100%
rename from c++/src/kj/common.c++
rename to c++/src/kj/common.cpp
diff --git a/c++/src/kj/compat/BUILD.bazel b/c++/src/kj/compat/BUILD.bazel
index 2350724a..e39e7c24 100644
--- a/c++/src/kj/compat/BUILD.bazel
+++ b/c++/src/kj/compat/BUILD.bazel
@@ -3,8 +3,8 @@ exports_files(["gtest.h"])
 cc_library(
     name = "kj-tls",
     srcs = [
-        "readiness-io.c++",
-        "tls.c++",
+        "readiness-io.cpp",
+        "tls.cpp",
     ],
     hdrs = [
         "readiness-io.h",
@@ -25,8 +25,8 @@ cc_library(
 cc_library(
     name = "kj-http",
     srcs = [
-        "http.c++",
-        "url.c++",
+        "http.cpp",
+        "url.cpp",
     ],
     hdrs = [
         "http.h",
@@ -42,7 +42,7 @@ cc_library(
 
 cc_library(
     name = "kj-gzip",
-    srcs = ["gzip.c++"],
+    srcs = ["gzip.cpp"],
     hdrs = ["gzip.h"],
     include_prefix = "kj/compat",
     visibility = ["//visibility:public"],
@@ -54,7 +54,7 @@ cc_library(
 
 cc_library(
     name = "kj-brotli",
-    srcs = ["brotli.c++"],
+    srcs = ["brotli.cpp"],
     hdrs = ["brotli.h"],
     include_prefix = "kj/compat",
     visibility = ["//visibility:public"],
@@ -78,12 +78,12 @@ cc_library(
 )
 
 kj_tests = [
-    "http-test.c++",
-    "url-test.c++",
+    "http-test.cpp",
+    "url-test.cpp",
 ]
 
 [cc_test(
-    name = f.removesuffix(".c++"),
+    name = f.removesuffix(".cpp"),
     srcs = [f],
     deps = [
         ":kj-http",
@@ -93,12 +93,12 @@ kj_tests = [
 
 cc_library(
     name = "http-socketpair-test-base",
-    hdrs = ["http-test.c++"],
+    hdrs = ["http-test.cpp"],
 )
 
 cc_test(
     name = "http-socketpair-test",
-    srcs = ["http-socketpair-test.c++"],
+    srcs = ["http-socketpair-test.cpp"],
     deps = [
         ":http-socketpair-test-base",
         ":kj-http",
@@ -110,12 +110,12 @@ cc_test(
 )
 
 kj_tls_tests = [
-    "tls-test.c++",
-    "readiness-io-test.c++",
+    "tls-test.cpp",
+    "readiness-io-test.cpp",
 ]
 
 [cc_test(
-    name = f.removesuffix(".c++"),
+    name = f.removesuffix(".cpp"),
     srcs = [f],
     target_compatible_with = select({
         "//src/kj:use_openssl": [],
@@ -130,7 +130,7 @@ kj_tls_tests = [
 
 cc_test(
     name = "gzip-test",
-    srcs = ["gzip-test.c++"],
+    srcs = ["gzip-test.cpp"],
     target_compatible_with = select({
         "//src/kj:use_zlib": [],
         "//conditions:default": ["@platforms//:incompatible"],
@@ -143,7 +143,7 @@ cc_test(
 
 cc_test(
     name = "brotli-test",
-    srcs = ["brotli-test.c++"],
+    srcs = ["brotli-test.cpp"],
     target_compatible_with = select({
         "//src/kj:use_brotli": [],
         "//conditions:default": ["@platforms//:incompatible"],
diff --git a/c++/src/kj/compat/brotli-test.c++ b/c++/src/kj/compat/brotli-test.cpp
similarity index 100%
rename from c++/src/kj/compat/brotli-test.c++
rename to c++/src/kj/compat/brotli-test.cpp
diff --git a/c++/src/kj/compat/brotli.c++ b/c++/src/kj/compat/brotli.cpp
similarity index 100%
rename from c++/src/kj/compat/brotli.c++
rename to c++/src/kj/compat/brotli.cpp
diff --git a/c++/src/kj/compat/gzip-test.c++ b/c++/src/kj/compat/gzip-test.cpp
similarity index 100%
rename from c++/src/kj/compat/gzip-test.c++
rename to c++/src/kj/compat/gzip-test.cpp
diff --git a/c++/src/kj/compat/gzip.c++ b/c++/src/kj/compat/gzip.cpp
similarity index 100%
rename from c++/src/kj/compat/gzip.c++
rename to c++/src/kj/compat/gzip.cpp
diff --git a/c++/src/kj/compat/http-socketpair-test.c++ b/c++/src/kj/compat/http-socketpair-test.cpp
similarity index 98%
rename from c++/src/kj/compat/http-socketpair-test.c++
rename to c++/src/kj/compat/http-socketpair-test.cpp
index 67c53b79..17aa2f3b 100644
--- a/c++/src/kj/compat/http-socketpair-test.c++
+++ b/c++/src/kj/compat/http-socketpair-test.cpp
@@ -22,4 +22,4 @@
 // Run http-test, but use real OS socketpairs to connect rather than using in-process pipes.
 // This is essentially an integration test between KJ HTTP and KJ OS socket handling.
 #define KJ_HTTP_TEST_USE_OS_PIPE 1
-#include "http-test.c++"
+#include "http-test.cpp"
diff --git a/c++/src/kj/compat/http-test.c++ b/c++/src/kj/compat/http-test.cpp
similarity index 99%
rename from c++/src/kj/compat/http-test.c++
rename to c++/src/kj/compat/http-test.cpp
index f10ff8d1..3208b555 100644
--- a/c++/src/kj/compat/http-test.c++
+++ b/c++/src/kj/compat/http-test.cpp
@@ -29,7 +29,7 @@
 #include <map>
 
 #if KJ_HTTP_TEST_USE_OS_PIPE
-// Run the test using OS-level socketpairs. (See http-socketpair-test.c++.)
+// Run the test using OS-level socketpairs. (See http-socketpair-test.cpp.)
 #define KJ_HTTP_TEST_SETUP_IO \
   auto io = kj::setupAsyncIo(); \
   auto& waitScope KJ_UNUSED = io.waitScope
diff --git a/c++/src/kj/compat/http.c++ b/c++/src/kj/compat/http.cpp
similarity index 100%
rename from c++/src/kj/compat/http.c++
rename to c++/src/kj/compat/http.cpp
diff --git a/c++/src/kj/compat/make-test-certs.sh b/c++/src/kj/compat/make-test-certs.sh
index 33725aff..96aaf38d 100755
--- a/c++/src/kj/compat/make-test-certs.sh
+++ b/c++/src/kj/compat/make-test-certs.sh
@@ -20,7 +20,7 @@
 # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 # THE SOFTWARE.
 
-# This script generates the test keys and certificates used in tls-test.c++.
+# This script generates the test keys and certificates used in tls-test.cpp.
 
 set -euxo pipefail
 
diff --git a/c++/src/kj/compat/readiness-io-test.c++ b/c++/src/kj/compat/readiness-io-test.cpp
similarity index 100%
rename from c++/src/kj/compat/readiness-io-test.c++
rename to c++/src/kj/compat/readiness-io-test.cpp
diff --git a/c++/src/kj/compat/readiness-io.c++ b/c++/src/kj/compat/readiness-io.cpp
similarity index 100%
rename from c++/src/kj/compat/readiness-io.c++
rename to c++/src/kj/compat/readiness-io.cpp
diff --git a/c++/src/kj/compat/tls-test.c++ b/c++/src/kj/compat/tls-test.cpp
similarity index 100%
rename from c++/src/kj/compat/tls-test.c++
rename to c++/src/kj/compat/tls-test.cpp
diff --git a/c++/src/kj/compat/tls.c++ b/c++/src/kj/compat/tls.cpp
similarity index 99%
rename from c++/src/kj/compat/tls.c++
rename to c++/src/kj/compat/tls.cpp
index 6affeb1f..df09a08d 100644
--- a/c++/src/kj/compat/tls.c++
+++ b/c++/src/kj/compat/tls.cpp
@@ -719,7 +719,7 @@ TlsContext::Options::Options()
 // never bother.
 
 struct TlsContext::SniCallback {
-  // struct SniCallback exists only so that callback() can be declared in the .c++ file, since it
+  // struct SniCallback exists only so that callback() can be declared in the .cpp file, since it
   // references OpenSSL types.
 
   static int callback(SSL* ssl, int* ad, void* arg);
diff --git a/c++/src/kj/compat/url-test.c++ b/c++/src/kj/compat/url-test.cpp
similarity index 100%
rename from c++/src/kj/compat/url-test.c++
rename to c++/src/kj/compat/url-test.cpp
diff --git a/c++/src/kj/compat/url.c++ b/c++/src/kj/compat/url.cpp
similarity index 100%
rename from c++/src/kj/compat/url.c++
rename to c++/src/kj/compat/url.cpp
diff --git a/c++/src/kj/debug-test.c++ b/c++/src/kj/debug-test.cpp
similarity index 100%
rename from c++/src/kj/debug-test.c++
rename to c++/src/kj/debug-test.cpp
diff --git a/c++/src/kj/debug.c++ b/c++/src/kj/debug.cpp
similarity index 100%
rename from c++/src/kj/debug.c++
rename to c++/src/kj/debug.cpp
diff --git a/c++/src/kj/debug.h b/c++/src/kj/debug.h
index 9f8459b1..486f7b69 100644
--- a/c++/src/kj/debug.h
+++ b/c++/src/kj/debug.h
@@ -26,7 +26,7 @@
 //
 // On failure, this will throw an exception whose description looks like:
 //
-//     myfile.c++:43: bug in code: expected a == b; a = 14; b = 72; a and b must be the same.
+//     myfile.cpp:43: bug in code: expected a == b; a = 14; b = 72; a and b must be the same.
 //
 // As you can see, all arguments after the first provide additional context.
 //
diff --git a/c++/src/kj/encoding-test.c++ b/c++/src/kj/encoding-test.cpp
similarity index 100%
rename from c++/src/kj/encoding-test.c++
rename to c++/src/kj/encoding-test.cpp
diff --git a/c++/src/kj/encoding.c++ b/c++/src/kj/encoding.cpp
similarity index 100%
rename from c++/src/kj/encoding.c++
rename to c++/src/kj/encoding.cpp
diff --git a/c++/src/kj/encoding.h b/c++/src/kj/encoding.h
index 293ecaf1..7083cd7f 100644
--- a/c++/src/kj/encoding.h
+++ b/c++/src/kj/encoding.h
@@ -292,7 +292,7 @@ inline EncodingResult<String> decodeCEscape(ArrayPtr<const char> text) {
 
 // If you pass a string literal to a function taking ArrayPtr<const char>, it'll include the NUL
 // termintator, which is surprising. Let's add overloads that avoid that. In practice this probably
-// only even matters for encoding-test.c++.
+// only even matters for encoding-test.cpp.
 
 template <size_t s>
 inline EncodingResult<Array<char16_t>> encodeUtf16(const char (&text)[s], bool nulTerminate=false) {
diff --git a/c++/src/kj/exception-override-symbolizer-test.c++ b/c++/src/kj/exception-override-symbolizer-test.cpp
similarity index 100%
rename from c++/src/kj/exception-override-symbolizer-test.c++
rename to c++/src/kj/exception-override-symbolizer-test.cpp
diff --git a/c++/src/kj/exception-test.c++ b/c++/src/kj/exception-test.cpp
similarity index 98%
rename from c++/src/kj/exception-test.c++
rename to c++/src/kj/exception-test.cpp
index 50054ab2..163df5fa 100644
--- a/c++/src/kj/exception-test.c++
+++ b/c++/src/kj/exception-test.cpp
@@ -31,10 +31,10 @@ namespace {
 
 TEST(Exception, TrimSourceFilename) {
 #if _WIN32
-  EXPECT_TRUE(trimSourceFilename(__FILE__) == "kj/exception-test.c++" ||
-              trimSourceFilename(__FILE__) == "kj\\exception-test.c++");
+  EXPECT_TRUE(trimSourceFilename(__FILE__) == "kj/exception-test.cpp" ||
+              trimSourceFilename(__FILE__) == "kj\\exception-test.cpp");
 #else
-  EXPECT_EQ(trimSourceFilename(__FILE__), "kj/exception-test.c++");
+  EXPECT_EQ(trimSourceFilename(__FILE__), "kj/exception-test.cpp");
 #endif
 }
 
@@ -209,7 +209,7 @@ KJ_TEST("getStackTrace() returns correct line number, not line + 1") {
   //    at random.
 
   auto trace = testStackTrace();
-  auto wrong = kj::str("exception-test.c++:", __LINE__);
+  auto wrong = kj::str("exception-test.cpp:", __LINE__);
 
   KJ_ASSERT(strstr(trace.cStr(), wrong.cStr()) == nullptr, trace, wrong);
 }
diff --git a/c++/src/kj/exception.c++ b/c++/src/kj/exception.cpp
similarity index 99%
rename from c++/src/kj/exception.c++
rename to c++/src/kj/exception.cpp
index 75e3179d..d6afbb99 100644
--- a/c++/src/kj/exception.c++
+++ b/c++/src/kj/exception.cpp
@@ -356,7 +356,7 @@ String stringifyStackTrace(ArrayPtr<void* const> trace) {
   while (i < kj::size(lines) && fgets(line, sizeof(line), p) != nullptr) {
     // Don't include exception-handling infrastructure or promise infrastructure in stack trace.
     // addr2line output matches file names; atos output matches symbol names.
-    if (strstr(line, "kj/common.c++") != nullptr ||
+    if (strstr(line, "kj/common.cpp") != nullptr ||
         strstr(line, "kj/exception.") != nullptr ||
         strstr(line, "kj/debug.") != nullptr ||
         strstr(line, "kj/async.") != nullptr ||
diff --git a/c++/src/kj/filesystem-disk-generic-test.c++ b/c++/src/kj/filesystem-disk-generic-test.cpp
similarity index 89%
rename from c++/src/kj/filesystem-disk-generic-test.c++
rename to c++/src/kj/filesystem-disk-generic-test.cpp
index 08c54b0e..829ab6ae 100644
--- a/c++/src/kj/filesystem-disk-generic-test.c++
+++ b/c++/src/kj/filesystem-disk-generic-test.cpp
@@ -21,14 +21,14 @@
 
 #if __linux__
 
-// This test compiles filesystem-disk-unix.c++ with various features #undefed, causing it to take
-// different code paths, then runs filesystem-disk-test.c++ against that.
+// This test compiles filesystem-disk-unix.cpp with various features #undefed, causing it to take
+// different code paths, then runs filesystem-disk-test.cpp against that.
 //
 // This test is only intended to run on Linux, but is intended to make the code behave like it
 // would on a generic flavor of Unix.
 //
 // At present this test only runs under Ekam builds. Integrating it into other builds would be
-// awkward since it #includes filesystem-disk-unix.c++, so it cannot link against that file, but
+// awkward since it #includes filesystem-disk-unix.cpp, so it cannot link against that file, but
 // needs to link against the rest of KJ. Ekam "just figures it out", but other build systems would
 // require a lot of work here.
 
@@ -63,7 +63,7 @@
 
 #define HOLES_NOT_SUPPORTED
 
-#include "filesystem-disk-unix.c++"
-#include "filesystem-disk-test.c++"
+#include "filesystem-disk-unix.cpp"
+#include "filesystem-disk-test.cpp"
 
 #endif  // __linux__
diff --git a/c++/src/kj/filesystem-disk-old-kernel-test.c++ b/c++/src/kj/filesystem-disk-old-kernel-test.cpp
similarity index 97%
rename from c++/src/kj/filesystem-disk-old-kernel-test.c++
rename to c++/src/kj/filesystem-disk-old-kernel-test.cpp
index 88d24e74..200e41ae 100644
--- a/c++/src/kj/filesystem-disk-old-kernel-test.c++
+++ b/c++/src/kj/filesystem-disk-old-kernel-test.cpp
@@ -25,7 +25,7 @@
     __has_include(<linux/audit.h>) && \
     __has_include(<linux/signal.h>) && \
     __has_include(<sys/ptrace.h>)
-// This test re-runs filesystem-disk-test.c++ with newfangled Linux kernel features disabled.
+// This test re-runs filesystem-disk-test.cpp with newfangled Linux kernel features disabled.
 //
 // This test must be compiled as a separate program, since it alters the calling process by
 // enabling seccomp to disable the kernel features.
@@ -117,7 +117,7 @@ SetupSeccompForFilesystemTest setupSeccompForFilesystemTest;
 #define HOLES_NOT_SUPPORTED
 
 // OK, now run all the regular filesystem tests!
-#include "filesystem-disk-test.c++"
+#include "filesystem-disk-test.cpp"
 
 #endif
 #endif
diff --git a/c++/src/kj/filesystem-disk-test.c++ b/c++/src/kj/filesystem-disk-test.cpp
similarity index 99%
rename from c++/src/kj/filesystem-disk-test.c++
rename to c++/src/kj/filesystem-disk-test.cpp
index 5e7596ef..29b6ffea 100644
--- a/c++/src/kj/filesystem-disk-test.c++
+++ b/c++/src/kj/filesystem-disk-test.cpp
@@ -146,7 +146,7 @@ private:
   static void recursiveDelete(ArrayPtr<const wchar_t> path) {
     // Recursively delete the temp dir, verifying that no .kj-tmp. files were left over.
     //
-    // Mostly copied from rmrfChildren() in filesystem-win32.c++.
+    // Mostly copied from rmrfChildren() in filesystem-win32.cpp.
 
     auto glob = join16(path, L"\\*");
 
diff --git a/c++/src/kj/filesystem-disk-unix.c++ b/c++/src/kj/filesystem-disk-unix.cpp
similarity index 100%
rename from c++/src/kj/filesystem-disk-unix.c++
rename to c++/src/kj/filesystem-disk-unix.cpp
diff --git a/c++/src/kj/filesystem-disk-win32.c++ b/c++/src/kj/filesystem-disk-win32.cpp
similarity index 99%
rename from c++/src/kj/filesystem-disk-win32.c++
rename to c++/src/kj/filesystem-disk-win32.cpp
index 1ecc9b5c..0e4f8aa7 100644
--- a/c++/src/kj/filesystem-disk-win32.c++
+++ b/c++/src/kj/filesystem-disk-win32.cpp
@@ -20,7 +20,7 @@
 // THE SOFTWARE.
 
 #if _WIN32
-// For Unix implementation, see filesystem-disk-unix.c++.
+// For Unix implementation, see filesystem-disk-unix.cpp.
 
 // Request Vista-level APIs.
 #include "win32-api-version.h"
diff --git a/c++/src/kj/filesystem-test.c++ b/c++/src/kj/filesystem-test.cpp
similarity index 100%
rename from c++/src/kj/filesystem-test.c++
rename to c++/src/kj/filesystem-test.cpp
diff --git a/c++/src/kj/filesystem.c++ b/c++/src/kj/filesystem.cpp
similarity index 100%
rename from c++/src/kj/filesystem.c++
rename to c++/src/kj/filesystem.cpp
diff --git a/c++/src/kj/filesystem.h b/c++/src/kj/filesystem.h
index 323420a4..4f5a3f36 100644
--- a/c++/src/kj/filesystem.h
+++ b/c++/src/kj/filesystem.h
@@ -888,7 +888,7 @@ public:
   //   condition in which the user could trick the algorithm into following a symlink and deleting
   //   everything at the destination. This race condition is not present in the Unix
   //   implementation. Fixing it for Windows would require rewriting a lot of code to use different
-  //   APIs. If you're interested, see the TODO(security) in filesystem-disk-win32.c++.
+  //   APIs. If you're interested, see the TODO(security) in filesystem-disk-win32.cpp.
 
   // TODO(someday):
   // - Support sockets? There's no openat()-like interface for sockets, so it's hard to support
diff --git a/c++/src/kj/function-test.c++ b/c++/src/kj/function-test.cpp
similarity index 100%
rename from c++/src/kj/function-test.c++
rename to c++/src/kj/function-test.cpp
diff --git a/c++/src/kj/hash.c++ b/c++/src/kj/hash.cpp
similarity index 100%
rename from c++/src/kj/hash.c++
rename to c++/src/kj/hash.cpp
diff --git a/c++/src/kj/hash.h b/c++/src/kj/hash.h
index d6ff46fd..15fdcd69 100644
--- a/c++/src/kj/hash.h
+++ b/c++/src/kj/hash.h
@@ -160,7 +160,7 @@ template <typename T, typename>
 inline uint HashCoder::operator*(ArrayPtr<T> arr) const {
   // Hash each array element to create a string of hashes, then murmur2 over those.
   //
-  // TODO(perf): Choose a more-modern hash. (See hash.c++.)
+  // TODO(perf): Choose a more-modern hash. (See hash.cpp.)
 
   constexpr uint m = 0x5bd1e995;
   constexpr uint r = 24;
diff --git a/c++/src/kj/io-test.c++ b/c++/src/kj/io-test.cpp
similarity index 100%
rename from c++/src/kj/io-test.c++
rename to c++/src/kj/io-test.cpp
diff --git a/c++/src/kj/io.c++ b/c++/src/kj/io.cpp
similarity index 100%
rename from c++/src/kj/io.c++
rename to c++/src/kj/io.cpp
diff --git a/c++/src/kj/list-test.c++ b/c++/src/kj/list-test.cpp
similarity index 100%
rename from c++/src/kj/list-test.c++
rename to c++/src/kj/list-test.cpp
diff --git a/c++/src/kj/list.c++ b/c++/src/kj/list.cpp
similarity index 100%
rename from c++/src/kj/list.c++
rename to c++/src/kj/list.cpp
diff --git a/c++/src/kj/main.c++ b/c++/src/kj/main.cpp
similarity index 100%
rename from c++/src/kj/main.c++
rename to c++/src/kj/main.cpp
diff --git a/c++/src/kj/map-test.c++ b/c++/src/kj/map-test.cpp
similarity index 100%
rename from c++/src/kj/map-test.c++
rename to c++/src/kj/map-test.cpp
diff --git a/c++/src/kj/memory-test.c++ b/c++/src/kj/memory-test.cpp
similarity index 100%
rename from c++/src/kj/memory-test.c++
rename to c++/src/kj/memory-test.cpp
diff --git a/c++/src/kj/memory.c++ b/c++/src/kj/memory.cpp
similarity index 100%
rename from c++/src/kj/memory.c++
rename to c++/src/kj/memory.cpp
diff --git a/c++/src/kj/mutex-test.c++ b/c++/src/kj/mutex-test.cpp
similarity index 100%
rename from c++/src/kj/mutex-test.c++
rename to c++/src/kj/mutex-test.cpp
diff --git a/c++/src/kj/mutex.c++ b/c++/src/kj/mutex.cpp
similarity index 100%
rename from c++/src/kj/mutex.c++
rename to c++/src/kj/mutex.cpp
diff --git a/c++/src/kj/mutex.h b/c++/src/kj/mutex.h
index 619e7f95..f7e6ba75 100644
--- a/c++/src/kj/mutex.h
+++ b/c++/src/kj/mutex.h
@@ -157,14 +157,14 @@ public:
   // Requires that the mutex is already exclusively locked before calling.
 
   void induceSpuriousWakeupForTest();
-  // Utility method for mutex-test.c++ which causes a spurious thread wakeup on all threads that
+  // Utility method for mutex-test.cpp which causes a spurious thread wakeup on all threads that
   // are waiting for a wait() condition. Assuming correct implementation, all those threads
   // should immediately go back to sleep.
 
 #if KJ_USE_FUTEX
   uint numReadersWaitingForTest() const;
   // The number of reader locks that are currently blocked on this lock (must be called while
-  // holding the writer lock). This is really only a utility method for mutex-test.c++ so it can
+  // holding the writer lock). This is really only a utility method for mutex-test.cpp so it can
   // validate certain invariants.
 #endif
 
@@ -406,7 +406,7 @@ private:
 public:
 #endif
   void induceSpuriousWakeupForTest() { mutex->induceSpuriousWakeupForTest(); }
-  // Utility method for mutex-test.c++ which causes a spurious thread wakeup on all threads that
+  // Utility method for mutex-test.cpp which causes a spurious thread wakeup on all threads that
   // are waiting for a when() condition. Assuming correct implementation, all those threads should
   // immediately go back to sleep.
 };
diff --git a/c++/src/kj/one-of-test.c++ b/c++/src/kj/one-of-test.cpp
similarity index 100%
rename from c++/src/kj/one-of-test.c++
rename to c++/src/kj/one-of-test.cpp
diff --git a/c++/src/kj/parse/char-test.c++ b/c++/src/kj/parse/char-test.cpp
similarity index 100%
rename from c++/src/kj/parse/char-test.c++
rename to c++/src/kj/parse/char-test.cpp
diff --git a/c++/src/kj/parse/char.c++ b/c++/src/kj/parse/char.cpp
similarity index 100%
rename from c++/src/kj/parse/char.c++
rename to c++/src/kj/parse/char.cpp
diff --git a/c++/src/kj/parse/common-test.c++ b/c++/src/kj/parse/common-test.cpp
similarity index 100%
rename from c++/src/kj/parse/common-test.c++
rename to c++/src/kj/parse/common-test.cpp
diff --git a/c++/src/kj/refcount-test.c++ b/c++/src/kj/refcount-test.cpp
similarity index 100%
rename from c++/src/kj/refcount-test.c++
rename to c++/src/kj/refcount-test.cpp
diff --git a/c++/src/kj/refcount.c++ b/c++/src/kj/refcount.cpp
similarity index 100%
rename from c++/src/kj/refcount.c++
rename to c++/src/kj/refcount.cpp
diff --git a/c++/src/kj/source-location.c++ b/c++/src/kj/source-location.cpp
similarity index 100%
rename from c++/src/kj/source-location.c++
rename to c++/src/kj/source-location.cpp
diff --git a/c++/src/kj/std/iostream-test.c++ b/c++/src/kj/std/iostream-test.cpp
similarity index 100%
rename from c++/src/kj/std/iostream-test.c++
rename to c++/src/kj/std/iostream-test.cpp
diff --git a/c++/src/kj/string-test.c++ b/c++/src/kj/string-test.cpp
similarity index 100%
rename from c++/src/kj/string-test.c++
rename to c++/src/kj/string-test.cpp
diff --git a/c++/src/kj/string-tree-test.c++ b/c++/src/kj/string-tree-test.cpp
similarity index 100%
rename from c++/src/kj/string-tree-test.c++
rename to c++/src/kj/string-tree-test.cpp
diff --git a/c++/src/kj/string-tree.c++ b/c++/src/kj/string-tree.cpp
similarity index 100%
rename from c++/src/kj/string-tree.c++
rename to c++/src/kj/string-tree.cpp
diff --git a/c++/src/kj/string.c++ b/c++/src/kj/string.cpp
similarity index 100%
rename from c++/src/kj/string.c++
rename to c++/src/kj/string.cpp
diff --git a/c++/src/kj/table-test.c++ b/c++/src/kj/table-test.cpp
similarity index 100%
rename from c++/src/kj/table-test.c++
rename to c++/src/kj/table-test.cpp
diff --git a/c++/src/kj/table.c++ b/c++/src/kj/table.cpp
similarity index 100%
rename from c++/src/kj/table.c++
rename to c++/src/kj/table.cpp
diff --git a/c++/src/kj/test-helpers.c++ b/c++/src/kj/test-helpers.cpp
similarity index 100%
rename from c++/src/kj/test-helpers.c++
rename to c++/src/kj/test-helpers.cpp
diff --git a/c++/src/kj/test-test.c++ b/c++/src/kj/test-test.cpp
similarity index 100%
rename from c++/src/kj/test-test.c++
rename to c++/src/kj/test-test.cpp
diff --git a/c++/src/kj/test.c++ b/c++/src/kj/test.cpp
similarity index 100%
rename from c++/src/kj/test.c++
rename to c++/src/kj/test.cpp
diff --git a/c++/src/kj/thread-test.c++ b/c++/src/kj/thread-test.cpp
similarity index 100%
rename from c++/src/kj/thread-test.c++
rename to c++/src/kj/thread-test.cpp
diff --git a/c++/src/kj/thread.c++ b/c++/src/kj/thread.cpp
similarity index 100%
rename from c++/src/kj/thread.c++
rename to c++/src/kj/thread.cpp
diff --git a/c++/src/kj/threadlocal-test.c++ b/c++/src/kj/threadlocal-test.cpp
similarity index 100%
rename from c++/src/kj/threadlocal-test.c++
rename to c++/src/kj/threadlocal-test.cpp
diff --git a/c++/src/kj/time-test.c++ b/c++/src/kj/time-test.cpp
similarity index 100%
rename from c++/src/kj/time-test.c++
rename to c++/src/kj/time-test.cpp
diff --git a/c++/src/kj/time.c++ b/c++/src/kj/time.cpp
similarity index 100%
rename from c++/src/kj/time.c++
rename to c++/src/kj/time.cpp
diff --git a/c++/src/kj/timer.c++ b/c++/src/kj/timer.cpp
similarity index 100%
rename from c++/src/kj/timer.c++
rename to c++/src/kj/timer.cpp
diff --git a/c++/src/kj/tuple-test.c++ b/c++/src/kj/tuple-test.cpp
similarity index 100%
rename from c++/src/kj/tuple-test.c++
rename to c++/src/kj/tuple-test.cpp
diff --git a/c++/src/kj/units-test.c++ b/c++/src/kj/units-test.cpp
similarity index 100%
rename from c++/src/kj/units-test.c++
rename to c++/src/kj/units-test.cpp
diff --git a/c++/src/kj/units.c++ b/c++/src/kj/units.cpp
similarity index 100%
rename from c++/src/kj/units.c++
rename to c++/src/kj/units.cpp
-- 
2.43.0

