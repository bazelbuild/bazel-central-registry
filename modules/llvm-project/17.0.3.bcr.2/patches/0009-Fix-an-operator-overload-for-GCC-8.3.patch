From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alexander Khabarov <alexander.khabarov@arm.com>
Date: Tue, 24 Oct 2023 11:48:21 +0000
Subject: [PATCH] Fix an operator overload for GCC 8.3

Rewrite an operator overload to be more explicit to make GCC 8.3 happy.
This is not needed for GCC 8.4+ and Clang.
---
 llvm/include/llvm/ADT/STLExtras.h | 37 ++++++++++++++++++++++---------
 1 file changed, 27 insertions(+), 10 deletions(-)

diff --git a/llvm/include/llvm/ADT/STLExtras.h b/llvm/include/llvm/ADT/STLExtras.h
index 7edc58263..3195c007d 100644
--- a/llvm/include/llvm/ADT/STLExtras.h
+++ b/llvm/include/llvm/ADT/STLExtras.h
@@ -1292,16 +1292,16 @@ public:
   }
 
   /// Compare this range with another.
-  template <typename OtherT>
-  friend bool operator==(const indexed_accessor_range_base &lhs,
-                         const OtherT &rhs) {
-    return std::equal(lhs.begin(), lhs.end(), rhs.begin(), rhs.end());
-  }
-  template <typename OtherT>
-  friend bool operator!=(const indexed_accessor_range_base &lhs,
-                         const OtherT &rhs) {
-    return !(lhs == rhs);
-  }
+  template <typename DerivedT0, typename BaseT0, typename T0,
+            typename PointerT0, typename ReferenceT0,
+            typename OtherT>
+  friend bool operator==(const indexed_accessor_range_base<DerivedT0, BaseT0, T0, PointerT0, ReferenceT0> &lhs,
+                         const OtherT &rhs);
+  template <typename DerivedT0, typename BaseT0, typename T0,
+            typename PointerT0, typename ReferenceT0,
+            typename OtherT>
+  friend bool operator!=(const indexed_accessor_range_base<DerivedT0, BaseT0, T0, PointerT0, ReferenceT0> &lhs,
+                         const OtherT &rhs);
 
   /// Return the size of this range.
   size_t size() const { return count; }
@@ -1365,6 +1365,23 @@ protected:
   /// The size from the owning range.
   ptrdiff_t count;
 };
+
+template <typename DerivedT, typename BaseT, typename T,
+          typename PointerT, typename ReferenceT,
+          typename OtherT>
+bool operator==(const indexed_accessor_range_base<DerivedT, BaseT, T, PointerT, ReferenceT> &lhs,
+                const OtherT &rhs) {
+  return std::equal(lhs.begin(), lhs.end(), rhs.begin(), rhs.end());
+}
+
+template <typename DerivedT, typename BaseT, typename T,
+          typename PointerT, typename ReferenceT,
+          typename OtherT>
+bool operator!=(const indexed_accessor_range_base<DerivedT, BaseT, T, PointerT, ReferenceT> &lhs,
+                const OtherT &rhs) {
+  return !(lhs == rhs);
+}
+
 } // end namespace detail
 
 /// This class provides an implementation of a range of
