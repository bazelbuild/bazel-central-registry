diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 000000000..c8f1e44e0
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,11 @@
+cc_library(
+    name = "glm",
+    hdrs = glob([
+        "glm/**/*.h",
+        "glm/**/*.hpp",
+    ]),
+    include_prefix = "glm",
+    includes = ["."],
+    textual_hdrs = glob(["glm/**/*.inl"]),
+    visibility = ["//visibility:public"],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100644
index 000000000..c9a1cca93
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,6 @@
+module(
+    name = "glm",
+    version = "1.0.1",
+)
+
+bazel_dep(name = "rules_cc", version = "0.0.9")
diff --git a/test/MODULE.bazel b/test/MODULE.bazel
new file mode 100644
index 000000000..0b7e61a35
--- /dev/null
+++ b/test/MODULE.bazel
@@ -0,0 +1,5 @@
+bazel_dep(name = "glm", version = "1.0.1")
+local_path_override(
+    module_name = "glm",
+    path = "..",
+)
diff --git a/test/WORKSPACE.bazel b/test/WORKSPACE.bazel
new file mode 100644
index 000000000..e69de29bb
diff --git a/test/core/BUILD.bazel b/test/core/BUILD.bazel
new file mode 100644
index 000000000..ba611cdb1
--- /dev/null
+++ b/test/core/BUILD.bazel
@@ -0,0 +1,131 @@
+cc_test(
+    name = "core_cpp_constexpr",
+    srcs = ["core_cpp_constexpr.cpp"],
+    deps = ["@glm"],
+)
+
+cc_test(
+    name = "core_cpp_defaulted_ctor",
+    srcs = ["core_cpp_defaulted_ctor.cpp"],
+    deps = ["@glm"],
+)
+
+cc_test(
+    name = "core_force_aligned_gentypes",
+    srcs = ["core_force_aligned_gentypes.cpp"],
+    deps = ["@glm"],
+)
+
+cc_test(
+    name = "core_force_ctor_init",
+    srcs = ["core_force_ctor_init.cpp"],
+    deps = ["@glm"],
+)
+
+cc_test(
+    name = "core_force_arch_unknown",
+    srcs = ["core_force_arch_unknown.cpp"],
+    deps = ["@glm"],
+)
+
+cc_test(
+    name = "core_force_compiler_unknown",
+    srcs = ["core_force_compiler_unknown.cpp"],
+    deps = ["@glm"],
+)
+
+cc_test(
+    name = "core_force_explicit_ctor",
+    srcs = ["core_force_explicit_ctor.cpp"],
+    deps = ["@glm"],
+)
+
+cc_test(
+    name = "core_force_inline",
+    srcs = ["core_force_inline.cpp"],
+    deps = ["@glm"],
+)
+
+cc_test(
+    name = "core_force_platform_unknown",
+    srcs = ["core_force_platform_unknown.cpp"],
+    deps = ["@glm"],
+)
+
+cc_test(
+    name = "core_force_pure",
+    srcs = ["core_force_pure.cpp"],
+    deps = ["@glm"],
+)
+
+cc_test(
+    name = "core_force_unrestricted_gentype",
+    srcs = ["core_force_unrestricted_gentype.cpp"],
+    deps = ["@glm"],
+)
+
+cc_test(
+    name = "core_force_xyzw_only",
+    srcs = ["core_force_xyzw_only.cpp"],
+    deps = ["@glm"],
+)
+
+cc_test(
+    name = "core_force_quat_wxyz",
+    srcs = ["core_force_quat_wxyz.cpp"],
+    deps = ["@glm"],
+)
+
+cc_test(
+    name = "core_type_aligned",
+    srcs = ["core_type_aligned.cpp"],
+    deps = ["@glm"],
+)
+
+cc_test(
+    name = "core_type_cast",
+    srcs = ["core_type_cast.cpp"],
+    deps = ["@glm"],
+)
+
+cc_test(
+    name = "core_type_ctor",
+    srcs = ["core_type_ctor.cpp"],
+    deps = ["@glm"],
+)
+
+cc_test(
+    name = "core_type_int",
+    srcs = ["core_type_int.cpp"],
+    deps = ["@glm"],
+)
+
+cc_test(
+    name = "core_type_length",
+    srcs = ["core_type_length.cpp"],
+    deps = ["@glm"],
+)
+
+cc_test(
+    name = "core_type_mat2x2",
+    srcs = ["core_type_mat2x2.cpp"],
+    deps = ["@glm"],
+)
+
+cc_test(
+    name = "core_type_mat2x3",
+    srcs = ["core_type_mat2x3.cpp"],
+    deps = ["@glm"],
+)
+
+cc_test(
+    name = "core_type_mat2x4",
+    srcs = ["core_type_mat2x4.cpp"],
+    deps = ["@glm"],
+)
+
+cc_test(
+    name = "core_type_mat3x2",
+    srcs = ["core_type_mat3x2.cpp"],
+    deps = ["@glm"],
+)
diff --git a/.bazelignore b/.bazelignore
new file mode 100644
index 000000000..9daeafb98
--- /dev/null
+++ b/.bazelignore
@@ -0,0 +1 @@
+test
