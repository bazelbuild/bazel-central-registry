/* Derived from 'glibconfig.h.in' */

#ifndef __GLIBCONFIG_H__
#define __GLIBCONFIG_H__

#include <glib/gmacros.h>

#define __STDC_FORMAT_MACROS

#include <limits.h>
#include <float.h>
#include <inttypes.h>
#include <stdint.h>
#include <sys/socket.h>
#define GLIB_HAVE_ALLOCA_H

#define GLIB_STATIC_COMPILATION 1
#define GOBJECT_STATIC_COMPILATION 1
#define GIO_STATIC_COMPILATION 1
#define GMODULE_STATIC_COMPILATION 1
#define GI_STATIC_COMPILATION 1
#define G_INTL_STATIC_COMPILATION 1
#define FFI_STATIC_BUILD 1

/* Specifies that GLib's g_print*() functions wrap the
 * system printf functions.  This is useful to know, for example,
 * when using glibc's register_printf_function().
 */
#define GLIB_USING_SYSTEM_PRINTF

G_BEGIN_DECLS

#define G_MINFLOAT	FLT_MIN
#define G_MAXFLOAT	FLT_MAX
#define G_MINDOUBLE	DBL_MIN
#define G_MAXDOUBLE	DBL_MAX
#define G_MINSHORT	SHRT_MIN
#define G_MAXSHORT	SHRT_MAX
#define G_MAXUSHORT	USHRT_MAX
#define G_MININT	INT_MIN
#define G_MAXINT	INT_MAX
#define G_MAXUINT	UINT_MAX
#define G_MINLONG	LONG_MIN
#define G_MAXLONG	LONG_MAX
#define G_MAXULONG	ULONG_MAX

typedef signed char gint8;
typedef unsigned char guint8;

typedef int16_t gint16;
typedef uint16_t guint16;

#define G_GINT16_MODIFIER "h"
#define G_GINT16_FORMAT "hi"
#define G_GUINT16_FORMAT "hu"


typedef int32_t gint32;
typedef uint32_t guint32;

#define G_GINT32_MODIFIER ""
#define G_GINT32_FORMAT "i"
#define G_GUINT32_FORMAT "u"


#define G_HAVE_GINT64 1          /* deprecated, always true */

typedef int64_t gint64;
typedef uint64_t guint64;

#define G_GINT64_CONSTANT(val)	INT64_C(val)
#define G_GUINT64_CONSTANT(val)	UINT64_C(val)

#if defined(__PRI64_PREFIX) /* GNU libc */
#  define G_GINT64_MODIFIER __PRI64_PREFIX
#elif defined(__PRI64) /* musl libc, FreeBSD */
#  define G_GINT64_MODIFIER __PRI64
#elif defined(__PRI_64_LENGTH_MODIFIER__) /* macOS */
#  define G_GINT64_MODIFIER __PRI_64_LENGTH_MODIFIER__
#else
#  define G_GINT64_MODIFIER "ll"
#endif
#define G_GINT64_FORMAT PRIi64
#define G_GUINT64_FORMAT PRIu64


#define GLIB_SIZEOF_VOID_P  __SIZEOF_POINTER__
#define GLIB_SIZEOF_LONG   __SIZEOF_LONG__
#define GLIB_SIZEOF_SIZE_T __SIZEOF_SIZE_T__
#define GLIB_SIZEOF_SSIZE_T __SIZEOF_SIZE_T__

typedef size_t gsize;
typedef ssize_t gssize;
#define G_GSIZE_MODIFIER "z"
#define G_GSSIZE_MODIFIER "z"
#define G_GSIZE_FORMAT "zu"
#define G_GSSIZE_FORMAT "zd"

#define G_MAXSIZE SIZE_MAX
#define G_MAXSSIZE SSIZE_MAX

#if SSIZE_MAX == INT64_MAX
#  define G_MINSSIZE INT64_MIN
#elif SSIZE_MAX == INT32_MAX
#  define G_MINSSIZE INT32_MIN
#else
#  error "SSIZE_MAX not in {INT64_MAX, INT32_MAX}"
#endif

typedef gint64 goffset;
#define G_MINOFFSET	G_MININT64
#define G_MAXOFFSET	G_MAXINT64

#define G_GOFFSET_MODIFIER      G_GINT64_MODIFIER
#define G_GOFFSET_FORMAT        G_GINT64_FORMAT
#define G_GOFFSET_CONSTANT(val) G_GINT64_CONSTANT(val)

#define G_POLLFD_FORMAT "%d"

#define GPOINTER_TO_INT(p)	((gint)  (intptr_t) (p))
#define GPOINTER_TO_UINT(p)	((guint) (uintptr_t) (p))

#define GINT_TO_POINTER(i)	((gpointer) (intptr_t) (i))
#define GUINT_TO_POINTER(u)	((gpointer) (uintptr_t) (u))

typedef intptr_t gintptr;
typedef uintptr_t guintptr;

#if UINTPTR_MAX == UINT64_MAX
#  define G_GINTPTR_MODIFIER      G_GINT64_MODIFIER
#  define G_GINTPTR_FORMAT        G_GINT64_FORMAT
#  define G_GUINTPTR_FORMAT       G_GUINT64_FORMAT
#elif UINTPTR_MAX == UINT32_MAX
#  define G_GINTPTR_MODIFIER      G_GINT32_MODIFIER
#  define G_GINTPTR_FORMAT        G_GINT32_FORMAT
#  define G_GUINTPTR_FORMAT       G_GUINT32_FORMAT
#endif

#define GLIB_MAJOR_VERSION @GLIB_MAJOR_VERSION@
#define GLIB_MINOR_VERSION @GLIB_MINOR_VERSION@
#define GLIB_MICRO_VERSION @GLIB_MICRO_VERSION@

#define G_OS_UNIX

#define G_VA_COPY va_copy

#define G_HAVE_ISO_VARARGS 1

/* gcc-2.95.x supports both gnu style and ISO varargs, but if -ansi
 * is passed ISO vararg support is turned off, and there is no work
 * around to turn it on, so we unconditionally turn it off.
 */
#if __GNUC__ == 2 && __GNUC_MINOR__ == 95
#  undef G_HAVE_ISO_VARARGS
#endif

#define G_HAVE_GROWING_STACK 0

#ifndef _MSC_VER
# define G_HAVE_GNUC_VARARGS 1
#endif

#if defined(__SUNPRO_C) && (__SUNPRO_C >= 0x590)
#define G_GNUC_INTERNAL __attribute__((visibility("hidden")))
#elif defined(__SUNPRO_C) && (__SUNPRO_C >= 0x550)
#define G_GNUC_INTERNAL __hidden
#elif defined (__GNUC__) && defined (G_HAVE_GNUC_VISIBILITY)
#define G_GNUC_INTERNAL __attribute__((visibility("hidden")))
#else
#define G_GNUC_INTERNAL
#endif

#define G_THREADS_ENABLED
#define G_THREADS_IMPL_POSIX

#define G_ATOMIC_LOCK_FREE

#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__

#define G_BYTE_ORDER G_LITTLE_ENDIAN

#define GINT16_TO_LE(val)   ((gint16) (val))
#define GUINT16_TO_LE(val)  ((guint16) (val))
#define GINT16_TO_BE(val)   ((gint16) GUINT16_SWAP_LE_BE (val))
#define GUINT16_TO_BE(val)  (GUINT16_SWAP_LE_BE (val))

#define GINT32_TO_LE(val)   ((gint32) (val))
#define GUINT32_TO_LE(val)  ((guint32) (val))
#define GINT32_TO_BE(val)   ((gint32) GUINT32_SWAP_LE_BE (val))
#define GUINT32_TO_BE(val)  (GUINT32_SWAP_LE_BE (val))

#define GINT64_TO_LE(val)   ((gint64) (val))
#define GUINT64_TO_LE(val)  ((guint64) (val))
#define GINT64_TO_BE(val)   ((gint64) GUINT64_SWAP_LE_BE (val))
#define GUINT64_TO_BE(val)  (GUINT64_SWAP_LE_BE (val))

#else

#define G_BYTE_ORDER G_BIG_ENDIAN

#define GINT16_TO_BE(val)	((gint16) (val))
#define GUINT16_TO_BE(val)	((guint16) (val))
#define GINT16_TO_LE(val)	((gint16) GUINT16_SWAP_LE_BE (val))
#define GUINT16_TO_LE(val)	(GUINT16_SWAP_LE_BE (val))

#define GINT32_TO_BE(val)	((gint32) (val))
#define GUINT32_TO_BE(val)	((guint32) (val))
#define GINT32_TO_LE(val)	((gint32) GUINT32_SWAP_LE_BE (val))
#define GUINT32_TO_LE(val)	(GUINT32_SWAP_LE_BE (val))

#define GINT64_TO_BE(val)	((gint64) (val))
#define GUINT64_TO_BE(val)	((guint64) (val))
#define GINT64_TO_LE(val)	((gint64) GUINT64_SWAP_LE_BE (val))
#define GUINT64_TO_LE(val)	(GUINT64_SWAP_LE_BE (val))

#endif

#if ULONG_MAX == UINT64_MAX
#  define GLONG_TO_LE(val)  ((glong) GINT64_TO_LE (val))
#  define GULONG_TO_LE(val) ((gulong) GUINT64_TO_LE (val))
#  define GLONG_TO_BE(val)  ((glong) GINT64_TO_BE (val))
#  define GULONG_TO_BE(val) ((gulong) GUINT64_TO_BE (val))
#elif ULONG_MAX == UINT32_MAX
#  define GLONG_TO_LE(val)  ((glong) GINT32_TO_LE (val))
#  define GULONG_TO_LE(val) ((gulong) GUINT32_TO_LE (val))
#  define GLONG_TO_BE(val)  ((glong) GINT32_TO_BE (val))
#  define GULONG_TO_BE(val) ((gulong) GUINT32_TO_BE (val))
#else
#  error "ULONG_MAX not in {UINT64_MAX, UINT32_MAX}"
#endif

#if UINT_MAX == UINT64_MAX
#  define GINT_TO_LE(val)   ((gint) GINT64_TO_LE (val))
#  define GUINT_TO_LE(val)  ((guint) GUINT64_TO_LE (val))
#  define GINT_TO_BE(val)   ((gint) GINT64_TO_BE (val))
#  define GUINT_TO_BE(val)  ((guint) GUINT64_TO_BE (val))
#elif UINT_MAX == UINT32_MAX
#  define GINT_TO_LE(val)   ((gint) GINT32_TO_LE (val))
#  define GUINT_TO_LE(val)  ((guint) GUINT32_TO_LE (val))
#  define GINT_TO_BE(val)   ((gint) GINT32_TO_BE (val))
#  define GUINT_TO_BE(val)  ((guint) GUINT32_TO_BE (val))
#else
#  error "UINT_MAX not in {UINT64_MAX, UINT32_MAX}"
#endif

#if SIZE_MAX == UINT64_MAX
#  define GSIZE_TO_LE(val)  ((gsize) GUINT64_TO_LE (val))
#  define GSSIZE_TO_LE(val) ((gssize) GINT64_TO_LE (val))
#  define GSIZE_TO_BE(val)  ((gsize) GUINT64_TO_BE (val))
#  define GSSIZE_TO_BE(val) ((gssize) GINT64_TO_BE (val))
#elif SIZE_MAX == UINT32_MAX
#  define GSIZE_TO_LE(val)  ((gsize) GUINT32_TO_LE (val))
#  define GSSIZE_TO_LE(val) ((gssize) GINT32_TO_LE (val))
#  define GSIZE_TO_BE(val)  ((gsize) GUINT32_TO_BE (val))
#  define GSSIZE_TO_BE(val) ((gssize) GINT32_TO_BE (val))
#else
#  error "SIZE_MAX not in {UINT64_MAX, UINT32_MAX}"
#endif

#define GLIB_SYSDEF_POLLIN =1
#define GLIB_SYSDEF_POLLOUT =4
#define GLIB_SYSDEF_POLLPRI =2
#define GLIB_SYSDEF_POLLHUP =16
#define GLIB_SYSDEF_POLLERR =8
#define GLIB_SYSDEF_POLLNVAL =32

/* No way to disable deprecation warnings for macros, so only emit deprecation
 * warnings on platforms where usage of this macro is broken */
#if defined(__APPLE__) || defined(_MSC_VER) || defined(__CYGWIN__)
#define G_MODULE_SUFFIX "so" GLIB_DEPRECATED_MACRO_IN_2_76
#else
#define G_MODULE_SUFFIX "so"
#endif

typedef int GPid;
#define G_PID_FORMAT "i"

#define GLIB_SYSDEF_AF_UNIX AF_UNIX
#define GLIB_SYSDEF_AF_INET AF_INET
#define GLIB_SYSDEF_AF_INET6 AF_INET6

#define GLIB_SYSDEF_MSG_OOB MSG_OOB
#define GLIB_SYSDEF_MSG_PEEK MSG_PEEK
#define GLIB_SYSDEF_MSG_DONTROUTE MSG_DONTROUTE

#define G_DIR_SEPARATOR '/'
#define G_DIR_SEPARATOR_S "/"
#define G_SEARCHPATH_SEPARATOR ':'
#define G_SEARCHPATH_SEPARATOR_S ":"

#undef G_HAVE_FREE_SIZED

G_END_DECLS

#endif /* __GLIBCONFIG_H__ */
