matrix:
  platform_unix:
    - debian10
    - debian11
    - macos
    - macos_arm64
    - ubuntu2004
    - ubuntu2204
    - ubuntu2404
  bazel: [7.x, 8.x, rolling]
tasks:
  verify_targets:
    platform: ${{ platform_unix }}
    bazel: ${{ bazel }}
    build_targets:
      - "@boost.test//:hdrs"
      - "@boost.test//:boost.test"
      - "@boost.test//:cpp_main"
      - "@boost.test//:test_main"
      - "@boost.test//:unit_test_main"

  verify_targets:
    platform: windows
    bazel: ${{ bazel }}
    build_targets:
      - "@boost.test//:hdrs"
      - "@boost.test//:boost.test"
      - "@boost.test//:cpp_main"
      - "@boost.test//:test_main"
      - "@boost.test//:unit_test_main"

# boost.test has a header-only version and a source version. If you include
# boost.test using "boost/test/included" and link the source version, you will
# get an odr-violation if compiling with ASan. Without ASan it will compile,
# but the BCR CI tests seem to run with some form of ASan. These tests ensure
# the BCR boost.test library always provides both a header-only target and a
# sources target.
bcr_test_module:
  module_path: test
  matrix:
    platform_unix:
      - debian10
      - debian11
      - macos
      - macos_arm64
      - ubuntu2004
      - ubuntu2204
      - ubuntu2404
    bazel: [7.x, 8.x, rolling]
  tasks:
    verify_targets_asan:
      platform: ${{ platform_unix }}  # doesn't work on Windows
      bazel: ${{ bazel }}
      build_flags:
        - --copt=-fsanitize=address
        - --compilation_mode=dbg
        - --copt=-fno-omit-frame-pointer
        - --linkopt=-fsanitize=address
      build_targets:
        - "//..."
      test_flags:
        - --copt=-fsanitize=address
        - --compilation_mode=dbg
        - --copt=-fno-omit-frame-pointer
        - --linkopt=-fsanitize=address
      test_targets:
        - "//..."
        # These tests have memory leaks, so skip it for ASan.
        - "-//framework-ts:macro_global_fixture_test"
        - "-//framework-ts:result_report_test"
