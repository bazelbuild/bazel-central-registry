diff --git a/build_defs.bzl b/build_defs.bzl
index fff23544..24d2c37e 100644
--- a/build_defs.bzl
+++ b/build_defs.bzl
@@ -7,13 +7,13 @@ Rules for building C++ flatbuffers with Bazel.
 
 load("@rules_cc//cc:defs.bzl", "cc_library")
 
-TRUE_FLATC_PATH = "@com_github_google_flatbuffers//:flatc"
+TRUE_FLATC_PATH = "@flatbuffers//:flatc"
 
 DEFAULT_INCLUDE_PATHS = [
     "./",
     "$(GENDIR)",
     "$(BINDIR)",
-    "$(execpath @com_github_google_flatbuffers//:flatc).runfiles/com_github_google_flatbuffers",
+    "$(execpath @flatbuffers//:flatc).runfiles/flatbuffers",
 ]
 
 def default_include_paths(flatc_path):
@@ -21,7 +21,7 @@ def default_include_paths(flatc_path):
         "./",
         "$(GENDIR)",
         "$(BINDIR)",
-        "$(execpath %s).runfiles/com_github_google_flatbuffers" % (flatc_path),
+        "$(execpath %s).runfiles/flatbuffers" % (flatc_path),
     ]
 
 DEFAULT_FLATC_ARGS = [
@@ -47,7 +47,7 @@ def flatbuffer_library_public(
         compatible_with = None,
         restricted_to = None,
         target_compatible_with = None,
-        flatc_path = "@com_github_google_flatbuffers//:flatc",
+        flatc_path = "@flatbuffers//:flatc",
         output_to_bindir = False,
         tools = None,
         extra_env = None,
@@ -262,8 +262,8 @@ def flatbuffer_cc_library(
             "-parse_headers",
         ],
         deps = [
-            "@com_github_google_flatbuffers//:runtime_cc",
-            "@com_github_google_flatbuffers//:flatbuffers",
+            "@flatbuffers//:runtime_cc",
+            "@flatbuffers//:flatbuffers",
         ] + deps,
         includes = cc_include_paths,
         compatible_with = compatible_with,
diff --git a/tests/ts/bazel_repository_test_dir/BUILD.bazel b/tests/ts/bazel_repository_test_dir/BUILD.bazel
index f6b01c5e..7f4c7d2d 100644
--- a/tests/ts/bazel_repository_test_dir/BUILD.bazel
+++ b/tests/ts/bazel_repository_test_dir/BUILD.bazel
@@ -1,13 +1,13 @@
 load("@aspect_rules_js//js:defs.bzl", "js_test")
 load("@aspect_rules_js//npm:defs.bzl", "npm_link_package")
-load("@com_github_google_flatbuffers//:typescript.bzl", "flatbuffer_ts_library")
+load("@flatbuffers//:typescript.bzl", "flatbuffer_ts_library")
 load("@npm//:defs.bzl", "npm_link_all_packages")
 
 npm_link_all_packages(name = "node_modules")
 
 npm_link_package(
     name = "node_modules/flatbuffers",
-    src = "@com_github_google_flatbuffers//ts:flatbuffers",
+    src = "@flatbuffers//ts:flatbuffers",
 )
 
 flatbuffer_ts_library(
diff --git a/ts/BUILD.bazel b/ts/BUILD.bazel
index 9bd9f4be..b902c438 100644
--- a/ts/BUILD.bazel
+++ b/ts/BUILD.bazel
@@ -66,7 +66,7 @@ sh_binary(
     name = "compile_flat_file",
     srcs = ["compile_flat_file.sh"],
     data = [
-        "@com_github_google_flatbuffers//:flatc",
+        "@flatbuffers//:flatc",
         "@nodejs_linux_amd64//:node_bin",
     ],
     # We just depend directly on the linux amd64 nodejs binary, so only support
diff --git a/ts/compile_flat_file.sh b/ts/compile_flat_file.sh
index 43e0c391..e3c783b8 100755
--- a/ts/compile_flat_file.sh
+++ b/ts/compile_flat_file.sh
@@ -16,7 +16,7 @@ source "${RUNFILES_DIR:-/dev/null}/$f" 2>/dev/null || \
 # --- end runfiles.bash initialization v2 ---
 set -eu
 runfiles_export_envvars
-FLATC=$(rlocation com_github_google_flatbuffers/flatc)
+FLATC=$(rlocation flatbuffers/flatc)
 TS_FILE=$(${FLATC}  $@  | grep  "Entry point.*generated" | grep -o "bazel-out.*ts")
 export PATH="$(rlocation nodejs_linux_amd64/bin/nodejs/bin):${PATH}"
 ${ESBUILD_BIN} ${TS_FILE} --format=cjs --bundle --outfile="${OUTPUT_FILE}"  --external:flatbuffers --log-level=warning
diff --git a/typescript.bzl b/typescript.bzl
index 63c1218c..807a8dee 100644
--- a/typescript.bzl
+++ b/typescript.bzl
@@ -69,7 +69,7 @@ def flatbuffer_ts_library(
         reflection_name = reflection_name,
         reflection_visibility = visibility,
         target_compatible_with = target_compatible_with,
-        flatc_path = "@com_github_google_flatbuffers//ts:compile_flat_file",
+        flatc_path = "@flatbuffers//ts:compile_flat_file",
         toolchains = ["@aspect_rules_esbuild//esbuild:resolved_toolchain"],
         tools = ["@aspect_rules_esbuild//esbuild:resolved_toolchain"],
     )
