"""Module definition for rules_d."""

module(
    name = "rules_d",

    # NOTE:
    # Always leave version unset or set to "" (the default,
    version = "0.2.0",
). The default value
    # can prevent issues when the module is used via non-registry overrides
    # (e.g. https://github.com/bazel-contrib/rules_go/issues/4380).
    #
    # The publish.yaml GitHub Action sets the version in the registry to the
    # release version by patching this MODULE.bazel file in the pull request to
    # the BCR.
    #
    # For more info, see this Slack thread:
    # https://bazelbuild.slack.com/archives/CA31HN1T3/p1750406404452179
    version = "",

    # NOTE:
    # Bumping compatibility_level too frequently is discouraged because it's
    # very disruptive: as soon as a module is requested at two different
    # compatibility levels in the dependency tree, users will see an error.
    #
    # As such, the compatibility_level (1) should be bumped *only* when the
    # breaking change affects most use cases and isn't easy to migrate and/or
    # work-around, and (2) *in the same commit* that introduces an incompatible
    # (breaking) change.
    compatibility_level = 1,
)

bazel_dep(name = "bazel_features", version = "1.32.0")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "package_metadata", version = "0.0.5")
bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "rules_cc", version = "0.0.10")

bazel_dep(name = "aspect_bazel_lib", version = "2.9.1", dev_dependency = True)
bazel_dep(name = "bazel_skylib_gazelle_plugin", version = "1.7.1", dev_dependency = True)
bazel_dep(name = "buildifier_prebuilt", version = "8.0.3", dev_dependency = True)
bazel_dep(name = "gazelle", version = "0.42.0", dev_dependency = True, repo_name = "bazel_gazelle")
bazel_dep(name = "rules_shell", version = "0.3.0", dev_dependency = True)
bazel_dep(name = "stardoc", version = "0.7.1", dev_dependency = True)

# NOTE:
# It is recommended to specify the exact d_version (ex. "dmd-2.111.0") for reproducible builds.
# Setting d_version = "auto" here ensures aarch64 CI works out of the box,
# but using "auto" may lead to non-reproducible builds and is not recommended.
d = use_extension("//d:extensions.bzl", "d")
d.toolchain(d_version = "auto")
use_repo(d, "d_toolchains")

register_toolchains("@d_toolchains//:all")
