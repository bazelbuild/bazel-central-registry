diff --git bazel/BUILD.bazel bazel/BUILD.bazel
new file mode 100644
index 00000000..ecb36c3e
--- /dev/null
+++ bazel/BUILD.bazel
@@ -0,0 +1 @@
+package(default_visibility = ["//visibility:private"])
diff --git bazel/automake_substitution.bzl bazel/automake_substitution.bzl
new file mode 100644
index 00000000..d0ffed5d
--- /dev/null
+++ bazel/automake_substitution.bzl
@@ -0,0 +1,33 @@
+# Copyright 2020 Google LLC
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+"""Provides helper that replaces @VARIABLE_NAME@ occurrences with values, as
+specified by a provided map."""
+
+def automake_substitution(name, src, out, substitutions = {}):
+    """Replaces @VARIABLE_NAME@ occurrences with values.
+
+    Note: The current implementation does not allow slashes in variable
+    values."""
+
+    substitution_pipe = " ".join([
+        "| sed 's/@%s@/%s/g'" % (variable_name, substitutions[variable_name])
+        for variable_name in substitutions.keys()
+    ])
+    native.genrule(
+        name = name,
+        srcs = [src],
+        outs = [out],
+        cmd = "cat $(location :%s) %s > $@" % (src, substitution_pipe),
+    )
diff --git bazel/pseudo_configure.bzl bazel/pseudo_configure.bzl
new file mode 100644
index 00000000..1602c79a
--- /dev/null
+++ bazel/pseudo_configure.bzl
@@ -0,0 +1,58 @@
+# Copyright 2020 Google LLC
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+"""Fake configuration step for hacky substitutions in ".in" files."""
+
+def pseudo_configure(name, out, src = None, defs = [], mappings = {}, additional = None):
+    """Creates a genrule that performs a fake 'configure' step on a file.
+
+    Args:
+      name: Name to use for the created genrule.
+      src: ".in" file to transform.
+      out: Path to place the output file contents.
+      defs: List of definitions to #define as `1`.
+      mappings: Mapping of definitions with non-trivial values.
+      additional: Optional mapping of definitions to prepend to the file.
+    """
+    additional = additional or {}
+
+    cmd = ""
+
+    if src == None:
+        cmd += "echo '#pragma once' >> $@ &&"
+
+    for k, v in additional.items():
+        cmd += "echo '#define %s %s' >> $@ &&" % (k, v)
+
+    if src != None:
+        cmd += "cat $<"
+    else:
+        cmd += "echo"
+    all_defs = ""
+    for def_ in defs:
+        cmd += r"| perl -p -e 's/#\s*undef \b(" + def_ + r")\b/#define $$1 1/'"
+        all_defs += "#define " + def_ + " 1\\n"
+    for key, value in mappings.items():
+        cmd += r"| perl -p -e 's/#\s*undef \b" + key + r"\b/#define " + str(key) + " " + str(value) + "/'"
+        cmd += r"| perl -p -e 's/#\s*define \b(" + key + r")\b 0/#define $$1 " + str(value) + "/'"
+        all_defs += "#define " + key + " " + value + "\\n"
+    cmd += r"| perl -p -e 's/\@DEFS\@/" + all_defs + "/'"
+    cmd += " >> $@"
+    native.genrule(
+        name = name,
+        srcs = [src] if src != None else [],
+        outs = [out],
+        cmd = cmd,
+        message = "Configuring " + (src if src else out),
+    )
