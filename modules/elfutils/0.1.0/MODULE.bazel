module(
    name = "elfutils",
    version = "0.1.0",
)


bazel_dep(name = "rules_foreign_cc", version = "0.15.1")
bazel_dep(name = "rules_cc", version = "0.2.8")
bazel_dep(name = "zlib_foreign", version = "0.0.1", repo_name = "zlib")


bazel_dep(name = "hermetic_cc_toolchain", version = "3.1.0")
toolchains = use_extension("@hermetic_cc_toolchain//toolchain:ext.bzl", "toolchains")
use_repo(toolchains, "zig_sdk")
register_toolchains(
    "@zig_sdk//toolchain/...",
    "@zig_sdk//libc_aware/toolchain/...",
)


http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
http_archive(
    name = "src",
    build_file = "//:src.BUILD.bazel",
    integrity = "sha256-eFf0S2JPTY1CHfhRqq57FALP5rzdLYBJ8V/AfT3edjU=",
    strip_prefix = "elfutils-0.193",
    patch_strip = 1,
    patches = [
        ":remove-rpath-link.patch",
    ],
    urls = [
        "https://sourceware.org/elfutils/ftp/0.193/elfutils-0.193.tar.bz2",
    ],
)


#bazel_dep(name = "gcc_toolchain", version = "0.9.0")
#gcc_toolchains = use_extension("@gcc_toolchain//toolchain:module_extensions.bzl", "gcc_toolchains", dev_dependency = True)
#[
    #[
        #gcc_toolchains.toolchain(
            #name = "gcc_toolchain_{}".format(arch),
            #target_arch = arch,
        #),
        #use_repo(gcc_toolchains, "gcc_toolchain_{}".format(arch)),
        #register_toolchains(
            #"@gcc_toolchain_{}//:cc_toolchain".format(arch),
            #"@gcc_toolchain_{}//:fortran_toolchain".format(arch),
            #dev_dependency = True,
        #),
    #]
    #for arch in [
        ##"aarch64",
        ##"armv7",
        #"x86_64",
    #]
#]
