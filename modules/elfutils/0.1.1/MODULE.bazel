module(
    name = "elfutils",
    version = "0.1.1",
)


bazel_dep(name = "rules_foreign_cc", version = "0.15.1")
bazel_dep(name = "rules_cc", version = "0.2.8")
bazel_dep(name = "zlib", version = "1.3.1.bcr.7")


http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
http_archive(
    name = "src",
    build_file = "//:src.BUILD.bazel",
    integrity = "sha256-eFf0S2JPTY1CHfhRqq57FALP5rzdLYBJ8V/AfT3edjU=",
    strip_prefix = "elfutils-0.193",
    urls = [
        "https://sourceware.org/elfutils/ftp/0.193/elfutils-0.193.tar.bz2",
    ],
)


bazel_dep(name = "gcc_toolchain", version = "0.9.0", dev_dependency = True)
gcc_toolchains = use_extension(
    "@gcc_toolchain//toolchain:module_extensions.bzl",
    "gcc_toolchains",
    dev_dependency = True)
[
    [
        gcc_toolchains.toolchain(
            name = "gcc_toolchain_{}".format(arch),
            target_arch = arch,
        ),
        use_repo(gcc_toolchains, "gcc_toolchain_{}".format(arch)),
        register_toolchains(
            "@gcc_toolchain_{}//:cc_toolchain".format(arch),
            "@gcc_toolchain_{}//:fortran_toolchain".format(arch),
            dev_dependency = True,
        ),
    ]
    for arch in [
        #"aarch64",
        #"armv7",
        "x86_64",
    ]
]
